window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"datachef": {"fullname": "datachef", "modulename": "datachef", "kind": "module", "doc": "<p>A python package for easy and reliable extraction of messy data to create tidy data</p>\n"}, "datachef.acquire": {"fullname": "datachef.acquire", "modulename": "datachef.acquire", "kind": "module", "doc": "<p>Module used for acquiring source data</p>\n"}, "datachef.acquire.base": {"fullname": "datachef.acquire.base", "modulename": "datachef.acquire.base", "kind": "module", "doc": "<p></p>\n"}, "datachef.acquire.base.BaseReader": {"fullname": "datachef.acquire.base.BaseReader", "modulename": "datachef.acquire.base", "qualname": "BaseReader", "kind": "class", "doc": "<p>Baseclass that all readers inherit from.</p>\n"}, "datachef.acquire.base.BaseReader.parse": {"fullname": "datachef.acquire.base.BaseReader.parse", "modulename": "datachef.acquire.base", "qualname": "BaseReader.parse", "kind": "function", "doc": "<p>Parse the datasource into a selectable thing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">selectable</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.csv": {"fullname": "datachef.acquire.csv", "modulename": "datachef.acquire.csv", "kind": "module", "doc": "<p>Module used for acquiring source data from csv files</p>\n"}, "datachef.acquire.csv.http_implemented": {"fullname": "datachef.acquire.csv.http_implemented", "modulename": "datachef.acquire.csv.http_implemented", "kind": "module", "doc": "<p>Holds the code that defines the local csv reader.</p>\n"}, "datachef.acquire.csv.http_implemented.http": {"fullname": "datachef.acquire.csv.http_implemented.http", "modulename": "datachef.acquire.csv.http_implemented", "qualname": "http", "kind": "function", "doc": "<p>Creates a selectable with default child class CsvSelectable from\na url with the http or https scheme.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A url.</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is CsvSelectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of HttpCsvReader.parse() as an argument.</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>cache</strong>:  Boolean flag for whether or not to cache get requests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.csv.csv.CsvSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">CsvSelectable</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"fullname": "datachef.acquire.csv.http_implemented.HttpCsvReader", "modulename": "datachef.acquire.csv.http_implemented", "qualname": "HttpCsvReader", "kind": "class", "doc": "<p>A reader to read in a source where that source is a url\nrepresenting a csv.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"fullname": "datachef.acquire.csv.http_implemented.HttpCsvReader.parse", "modulename": "datachef.acquire.csv.http_implemented", "qualname": "HttpCsvReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a Selectable. Unless overridden the\nselectable is of type CsvSelectable.</p>\n\n<p>Optional **kwargs are propagated to the csv.reader() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A url</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>cache</strong>:  Boolean flag for whether or not to cache get requests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.csv.csv.CsvSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">CsvSelectable</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.csv.local_implemented": {"fullname": "datachef.acquire.csv.local_implemented", "modulename": "datachef.acquire.csv.local_implemented", "kind": "module", "doc": "<p>Holds the code that defines the local csv reader.</p>\n"}, "datachef.acquire.csv.local_implemented.local": {"fullname": "datachef.acquire.csv.local_implemented.local", "modulename": "datachef.acquire.csv.local_implemented", "qualname": "local", "kind": "function", "doc": "<p>Read data from a Path (or string representing a path)\npresent on the same machine where datachef is running.</p>\n\n<p>This local csv reader uses csv.reader() from the standard\npython library. Keyword arguments passed into this function\nare propagated through to csv.reader().\n<a href=\"https://docs.python.org/3/library/csv.html\">https://docs.python.org/3/library/csv.html</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path object or a string representing a path</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is CsvSelectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of LocalCsvReader.parse() as an argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.csv.csv.CsvSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">CsvSelectable</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"fullname": "datachef.acquire.csv.local_implemented.LocalCsvReader", "modulename": "datachef.acquire.csv.local_implemented", "qualname": "LocalCsvReader", "kind": "class", "doc": "<p>A reader to lead in a source where that source is a locally\nheld csv file.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"fullname": "datachef.acquire.csv.local_implemented.LocalCsvReader.parse", "modulename": "datachef.acquire.csv.local_implemented", "qualname": "LocalCsvReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a Selectable. Unless overridden the\nselectable is of type CsvSelectable.</p>\n\n<p>Optional **kwargs are propagated to the csv.reader() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path or str representing a path indicating a local file</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.csv.csv.CsvSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">CsvSelectable</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.main": {"fullname": "datachef.acquire.main", "modulename": "datachef.acquire.main", "kind": "module", "doc": "<p>Source code for the acquirer class that power the data acquisition methods.</p>\n\n<p>You would not typically be calling this directly outside of advanced users\nutilising kwargs for unanticipated and/or niche uses cases.</p>\n\n<p>In the vast majority of cirumstances it is both easier and more reliable\nto use the provided wrappers.</p>\n\n<p>acquire.csv.local()\nacquire.csv.remote()\netc...</p>\n"}, "datachef.acquire.main.acquirer": {"fullname": "datachef.acquire.main.acquirer", "modulename": "datachef.acquire.main", "qualname": "acquirer", "kind": "function", "doc": "<p>The principle data acquisition function. Wraps the reader\nto enable pre and post hook.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A source appropriate for the provided BaseReader</li>\n<li><strong>reader</strong>:  A class that implements datachef.acquire.base.BaseReader</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of reader.parse() as an argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single or list of class Selectable or inheritor of as returned by reader after\n  optional modification by post_hook.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseReader</span>,</span><span class=\"param\">\t<span class=\"n\">selectable</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span>,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span><span class=\"p\">],</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.python": {"fullname": "datachef.acquire.python", "modulename": "datachef.acquire.python", "kind": "module", "doc": "<p>Module used for acquiring source data from python objects</p>\n"}, "datachef.acquire.python.listoflists_implemented": {"fullname": "datachef.acquire.python.listoflists_implemented", "modulename": "datachef.acquire.python.listoflists_implemented", "kind": "module", "doc": "<p>Holds the code that defines the python list_of_lists reader.</p>\n"}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"fullname": "datachef.acquire.python.listoflists_implemented.list_of_lists", "modulename": "datachef.acquire.python.listoflists_implemented", "qualname": "list_of_lists", "kind": "function", "doc": "<p>A reader to create a selectable from a list of python\nlists, with each cell entry being a simple string.</p>\n\n<p>Regarding ordering we traverse the x axis then the y axis,\ni.e standard human reading order.</p>\n\n<p>For example:\n[\n    [\"Content of A1\", \"Contents of B1\", \"Contents of C1\"],\n    [\"Content of A2\", \"Contents of B2\", \"Contents of C2\"]\n]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path object or a string representing a path</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is Selectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of ListOfListsReader.parse() as an argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.selectable.Selectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"fullname": "datachef.acquire.python.listoflists_implemented.ListOfListsReader", "modulename": "datachef.acquire.python.listoflists_implemented", "qualname": "ListOfListsReader", "kind": "class", "doc": "<p>Baseclass that all readers inherit from.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"fullname": "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse", "modulename": "datachef.acquire.python.listoflists_implemented", "qualname": "ListOfListsReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a list of Selectables. Unless overridden the\nselectable is of type XlsSelectable.</p>\n\n<p>Additional **kwargs are propagated to xlrd.open_workbook()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A list of lists of strings representing rows of cells</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A populated instance of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.selectable.Selectable&#x27;&gt;</span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xls": {"fullname": "datachef.acquire.xls", "modulename": "datachef.acquire.xls", "kind": "module", "doc": "<p>Module used for acquiring source data from xls files</p>\n"}, "datachef.acquire.xls.http_implemented": {"fullname": "datachef.acquire.xls.http_implemented", "modulename": "datachef.acquire.xls.http_implemented", "kind": "module", "doc": "<p>Holds the code that defines the local xlsx reader.</p>\n"}, "datachef.acquire.xls.http_implemented.http": {"fullname": "datachef.acquire.xls.http_implemented.http", "modulename": "datachef.acquire.xls.http_implemented", "qualname": "http", "kind": "function", "doc": "<p>Read data from a Path (or string representing a path)\npresent on the same machine where datachef is running.</p>\n\n<p>This xls reader uses xlrd:\n<a href=\"https://xlrd.readthedocs.io/en/latest/\">https://xlrd.readthedocs.io/en/latest/</a></p>\n\n<p>Any kwargs passed to this function are propagated to\nthe xlrd.open_workbook() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A url.</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is XlsSelectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of HttpXlsReader.parse() as an argument.</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>cache</strong>:  Boolean flag for whether or not to cache get requests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xls.xls.XlsSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">XlsSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"fullname": "datachef.acquire.xls.http_implemented.HttpXlsReader", "modulename": "datachef.acquire.xls.http_implemented", "qualname": "HttpXlsReader", "kind": "class", "doc": "<p>A reader to lead in a source where that source is a locally\nheld xlsx file.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"fullname": "datachef.acquire.xls.http_implemented.HttpXlsReader.parse", "modulename": "datachef.acquire.xls.http_implemented", "qualname": "HttpXlsReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a list of Selectables. Unless overridden the\nselectable is of type XlsSelectable.</p>\n\n<p>Additional **kwargs are propagated to xlrd.open_workbook()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A url</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>cache</strong>:  Boolean flag for whether or not to cache get requests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xls.xls.XlsSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">XlsSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xls.local_implemented": {"fullname": "datachef.acquire.xls.local_implemented", "modulename": "datachef.acquire.xls.local_implemented", "kind": "module", "doc": "<p>Holds the code that defines the local xlsx reader.</p>\n"}, "datachef.acquire.xls.local_implemented.local": {"fullname": "datachef.acquire.xls.local_implemented.local", "modulename": "datachef.acquire.xls.local_implemented", "qualname": "local", "kind": "function", "doc": "<p>Read data from a Path (or string representing a path)\npresent on the same machine where datachef is running.</p>\n\n<p>This xls reader uses xlrd:\n<a href=\"https://xlrd.readthedocs.io/en/latest/\">https://xlrd.readthedocs.io/en/latest/</a></p>\n\n<p>Any kwargs passed to this function are propagated to\nthe xlrd.open_workbook() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path object or a string representing a path</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is XlsSelectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of XlsSelectable.parse() as an argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xls.xls.XlsSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">XlsSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"fullname": "datachef.acquire.xls.local_implemented.LocalXlsReader", "modulename": "datachef.acquire.xls.local_implemented", "qualname": "LocalXlsReader", "kind": "class", "doc": "<p>A reader to lead in a source where that source is a locally\nheld xls file.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"fullname": "datachef.acquire.xls.local_implemented.LocalXlsReader.parse", "modulename": "datachef.acquire.xls.local_implemented", "qualname": "LocalXlsReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a list of Selectables. Unless overridden the\nselectable is of type XlsSelectable.</p>\n\n<p>Additional **kwargs are propagated to xlrd.open_workbook()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path or str representing a path indicating a local file</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xls.xls.XlsSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">xls</span><span class=\"o\">.</span><span class=\"n\">XlsSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xlsx": {"fullname": "datachef.acquire.xlsx", "modulename": "datachef.acquire.xlsx", "kind": "module", "doc": "<p>Module used for acquiring source data from xlsx files</p>\n"}, "datachef.acquire.xlsx.http_implemented": {"fullname": "datachef.acquire.xlsx.http_implemented", "modulename": "datachef.acquire.xlsx.http_implemented", "kind": "module", "doc": "<p>Holds the code that defines the local xlsx reader.</p>\n"}, "datachef.acquire.xlsx.http_implemented.http": {"fullname": "datachef.acquire.xlsx.http_implemented.http", "modulename": "datachef.acquire.xlsx.http_implemented", "qualname": "http", "kind": "function", "doc": "<p>Read data from a Path (or string representing a path)\npresent on the same machine where datachef is running.</p>\n\n<p>This local xlsx reader uses openpyxl:\n<a href=\"https://openpyxl.readthedocs.io/en/stable/index.html\">https://openpyxl.readthedocs.io/en/stable/index.html</a></p>\n\n<p>Any kwargs passed to this function are propagated to\nthe openpyxl.load_workbook() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A url.</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is XlsxSelectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of XlsxSelectable.parse() as an argument.</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>cache</strong>:  Boolean flag for whether or not to cache get requests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xlsx.xlsx.XlsxSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">XlsxSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"fullname": "datachef.acquire.xlsx.http_implemented.HttpXlsxReader", "modulename": "datachef.acquire.xlsx.http_implemented", "qualname": "HttpXlsxReader", "kind": "class", "doc": "<p>A reader to lead in a source where that source is a locally\nheld xlsx file.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"fullname": "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse", "modulename": "datachef.acquire.xlsx.http_implemented", "qualname": "HttpXlsxReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a list of Selectables. Unless overridden the\nselectable is of type XlsxSelectable.</p>\n\n<p>Additional **kwargs are propagated to openpyxl.load_workbook()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A url.</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.\n:data_only: An openpyxl.load_workbook() option to disable acquisition of non data elements from the tabulated source (macros etc)</li>\n<li><strong>session</strong>:  An optional requests.Session object.</li>\n<li><strong>cache</strong>:  Boolean flag for whether or not to cache get requests.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xlsx.xlsx.XlsxSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">data_only</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">XlsxSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xlsx.local_implemented": {"fullname": "datachef.acquire.xlsx.local_implemented", "modulename": "datachef.acquire.xlsx.local_implemented", "kind": "module", "doc": "<p>Holds the code that defines the local xlsx reader.</p>\n"}, "datachef.acquire.xlsx.local_implemented.local": {"fullname": "datachef.acquire.xlsx.local_implemented.local", "modulename": "datachef.acquire.xlsx.local_implemented", "qualname": "local", "kind": "function", "doc": "<p>Read data from a Path (or string representing a path)\npresent on the same machine where datachef is running.</p>\n\n<p>This local xlsx reader uses openpyxl:\n<a href=\"https://openpyxl.readthedocs.io/en/stable/index.html\">https://openpyxl.readthedocs.io/en/stable/index.html</a></p>\n\n<p>Any kwargs passed to this function are propagated to\nthe openpyxl.load_workbook() method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path object or a string representing a path</li>\n<li><strong>selectable</strong>:  A class that implements datachef.selection.selectable.Selectable of an inheritor of. Default is XlsxSelectable</li>\n<li><strong>pre_hook</strong>:  A callable that can take source as an argument</li>\n<li><strong>post_hook</strong>:  A callable that can take the output of XlsxSelectable.parse() as an argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single populated Selectable of type as specified by selectable param</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xlsx.xlsx.XlsxSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">pre_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">post_hook</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">XlsxSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"fullname": "datachef.acquire.xlsx.local_implemented.LocalXlsxReader", "modulename": "datachef.acquire.xlsx.local_implemented", "qualname": "LocalXlsxReader", "kind": "class", "doc": "<p>A reader to lead in a source where that source is a locally\nheld xls file.</p>\n", "bases": "datachef.acquire.base.BaseReader"}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"fullname": "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse", "modulename": "datachef.acquire.xlsx.local_implemented", "qualname": "LocalXlsxReader.parse", "kind": "function", "doc": "<p>Parse the provided source into a list of Selectables. Unless overridden the\nselectable is of type XlsxSelectable.</p>\n\n<p>Additional **kwargs are propagated to openpyxl.load_workbook()</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong>:  A Path or str representing a path indicating a local file</li>\n<li><strong>selectable</strong>:  The selectable type to be returned.\n:data_only: An openpyxl.load_workbook() option to disable acquisition of non data elements from the tabulated source (macros etc)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of type as specified by param selectable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\tselectable: datachef.selection.selectable.Selectable = &lt;class &#x27;datachef.selection.xlsx.xlsx.XlsxSelectable&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">data_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">xlsx</span><span class=\"o\">.</span><span class=\"n\">XlsxSelectable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.against": {"fullname": "datachef.against", "modulename": "datachef.against", "kind": "module", "doc": "<p></p>\n"}, "datachef.against.implementations": {"fullname": "datachef.against.implementations", "modulename": "datachef.against.implementations", "kind": "module", "doc": "<p></p>\n"}, "datachef.against.implementations.base": {"fullname": "datachef.against.implementations.base", "modulename": "datachef.against.implementations.base", "kind": "module", "doc": "<p></p>\n"}, "datachef.against.implementations.base.BaseValidator": {"fullname": "datachef.against.implementations.base.BaseValidator", "modulename": "datachef.against.implementations.base", "qualname": "BaseValidator", "kind": "class", "doc": "<p>The standard Matcher used to validate a\nsingle cell object.</p>\n"}, "datachef.against.implementations.base.BaseValidator.msg": {"fullname": "datachef.against.implementations.base.BaseValidator.msg", "modulename": "datachef.against.implementations.base", "qualname": "BaseValidator.msg", "kind": "function", "doc": "<p>Generate a message on validation failure\nto provide some contextual information to\nthe user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.against.implementations.items": {"fullname": "datachef.against.implementations.items", "modulename": "datachef.against.implementations.items", "kind": "module", "doc": "<p></p>\n"}, "datachef.against.implementations.items.ItemsValidator": {"fullname": "datachef.against.implementations.items.ItemsValidator", "modulename": "datachef.against.implementations.items", "qualname": "ItemsValidator", "kind": "class", "doc": "<p>A class to return bool (valid or not) when\ncalled with a single instance of a datachef\nCell object.</p>\n", "bases": "datachef.against.implementations.base.BaseValidator"}, "datachef.against.implementations.items.ItemsValidator.__init__": {"fullname": "datachef.against.implementations.items.ItemsValidator.__init__", "modulename": "datachef.against.implementations.items", "qualname": "ItemsValidator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, "datachef.against.implementations.items.ItemsValidator.items": {"fullname": "datachef.against.implementations.items.ItemsValidator.items", "modulename": "datachef.against.implementations.items", "qualname": "ItemsValidator.items", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, "datachef.against.implementations.items.ItemsValidator.msg": {"fullname": "datachef.against.implementations.items.ItemsValidator.msg", "modulename": "datachef.against.implementations.items", "qualname": "ItemsValidator.msg", "kind": "function", "doc": "<p>Provide a contextually meaningful\nmessage to the user where cell\nvalue not on the provided items list</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  A single datachef Cell object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A contextual message</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.against.implementations.regex": {"fullname": "datachef.against.implementations.regex", "modulename": "datachef.against.implementations.regex", "kind": "module", "doc": "<p></p>\n"}, "datachef.against.implementations.regex.RegexValidator": {"fullname": "datachef.against.implementations.regex.RegexValidator", "modulename": "datachef.against.implementations.regex", "qualname": "RegexValidator", "kind": "class", "doc": "<p></p>\n", "bases": "datachef.against.implementations.base.BaseValidator"}, "datachef.against.implementations.regex.RegexValidator.__init__": {"fullname": "datachef.against.implementations.regex.RegexValidator.__init__", "modulename": "datachef.against.implementations.regex", "qualname": "RegexValidator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "datachef.against.implementations.regex.RegexValidator.pattern": {"fullname": "datachef.against.implementations.regex.RegexValidator.pattern", "modulename": "datachef.against.implementations.regex", "qualname": "RegexValidator.pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "datachef.against.implementations.regex.RegexValidator.msg": {"fullname": "datachef.against.implementations.regex.RegexValidator.msg", "modulename": "datachef.against.implementations.regex", "qualname": "RegexValidator.msg", "kind": "function", "doc": "<p>Provide a contextually meaningful\nmessage to the user where cell\nvalue does not match the provided\nregular expression.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  A single datachef Cell object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A contextual message</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.against.wrapper": {"fullname": "datachef.against.wrapper", "modulename": "datachef.against.wrapper", "kind": "module", "doc": "<p>Convenience wrappers for pre defined validators</p>\n"}, "datachef.against.wrapper.regex": {"fullname": "datachef.against.wrapper.regex", "modulename": "datachef.against.wrapper", "qualname": "regex", "kind": "function", "doc": "<p>Creates a RegexValidator to check if the\ndatachef Cell.value property of a given Cell\nmatches the provided pattern.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pattern</strong>:  A regular expression</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A instantiated RegexValidator</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">against</span><span class=\"o\">.</span><span class=\"n\">implementations</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">RegexValidator</span>:</span></span>", "funcdef": "def"}, "datachef.against.wrapper.items": {"fullname": "datachef.against.wrapper.items", "modulename": "datachef.against.wrapper", "qualname": "items", "kind": "function", "doc": "<p>Creates an ItemsValidator to check if the\ndatachef Cell.value property of a given Cell\nis contained within the provided list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong>:  A list of strings representing valid values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A instantiated ItemsValidator</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">against</span><span class=\"o\">.</span><span class=\"n\">implementations</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">ItemsValidator</span>:</span></span>", "funcdef": "def"}, "datachef.column": {"fullname": "datachef.column", "modulename": "datachef.column", "kind": "module", "doc": "<p></p>\n"}, "datachef.column.base": {"fullname": "datachef.column.base", "modulename": "datachef.column.base", "kind": "module", "doc": "<p></p>\n"}, "datachef.column.base.BaseColumn": {"fullname": "datachef.column.base.BaseColumn", "modulename": "datachef.column.base", "qualname": "BaseColumn", "kind": "class", "doc": "<p>A base class to hold the required variables for something\nthat can be resolve to a column of data.</p>\n"}, "datachef.column.base.BaseColumn.__init__": {"fullname": "datachef.column.base.BaseColumn.__init__", "modulename": "datachef.column.base", "qualname": "BaseColumn.__init__", "kind": "function", "doc": "<p>An object representing a proto column that can resolve a\nvisual relationship to retrieve the appropriate column\nvalue relative to a given observation containing cell object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>engine</strong>:  The \"lookup engine\" that resolves cell value lookups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseLookupEngine</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "datachef.column.base.BaseColumn.engine": {"fullname": "datachef.column.base.BaseColumn.engine", "modulename": "datachef.column.base", "qualname": "BaseColumn.engine", "kind": "variable", "doc": "<p></p>\n"}, "datachef.column.base.BaseColumn.label": {"fullname": "datachef.column.base.BaseColumn.label", "modulename": "datachef.column.base", "qualname": "BaseColumn.label", "kind": "variable", "doc": "<p></p>\n"}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"fullname": "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell", "modulename": "datachef.column.base", "qualname": "BaseColumn.resolve_column_cell_from_obs_cell", "kind": "function", "doc": "<p>Use the provided lookup engine to return the value\nof this Column against a given observation, according\nto the lookup engine in use.</p>\n\n<p>The found cell is ran through _post_lookup() in case\nthis particular Column is applying custom handling of\nsome sort.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  A single datachef Cell object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single datachef Cell object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">observation_cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>:</span></span>", "funcdef": "def"}, "datachef.column.base.BaseColumn.lookup_preview": {"fullname": "datachef.column.base.BaseColumn.lookup_preview", "modulename": "datachef.column.base", "qualname": "BaseColumn.lookup_preview", "kind": "function", "doc": "<p>Takes a selection of observations and generates\ntuples of:\n<observation_cell> : <column cell></p>\n\n<p>This is intended for sanity checking during\ndevelopment, not for doing the actual transform.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>observation_selection</strong>:  A list of cells representing\na selection of observations from the data source.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">observation_selection</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"p\">,</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.column.column": {"fullname": "datachef.column.column", "modulename": "datachef.column.column", "kind": "module", "doc": "<p></p>\n"}, "datachef.column.column.Column": {"fullname": "datachef.column.column.Column", "modulename": "datachef.column.column", "qualname": "Column", "kind": "class", "doc": "<p>A basic implementation of a class that represents\nsomething that can be resolve into a column of data.</p>\n\n<p>This class differs from BaseColumn because:</p>\n\n<ol>\n<li><p>It allows the overriding of the value of cells that\nare extracted via the apply=keyword</p></li>\n<li><p>It allows the validation of data extracted via\nthe validation= keyword.</p></li>\n</ol>\n", "bases": "datachef.column.base.BaseColumn"}, "datachef.column.column.Column.horizontal_condition": {"fullname": "datachef.column.column.Column.horizontal_condition", "modulename": "datachef.column.column", "qualname": "Column.horizontal_condition", "kind": "function", "doc": "<p>Creates a column that populates based on the\nvalues resolved for one or more other columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_label</strong>:  The label we wish to give to the column.</li>\n<li><strong>resolver</strong>:  A callable to resolve the horizontal condition logic.\n:priority: controls order of resolution for all present HorizontalCondition objects,\nlower values are resolved first.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A Column object populated with a configured HorizontalCondition\n  lookup engine.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">resolver</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.column.column.Column.constant": {"fullname": "datachef.column.column.Column.constant", "modulename": "datachef.column.column", "qualname": "Column.constant", "kind": "function", "doc": "<p>Create a column that has one specific value for every\nentry.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_label</strong>:  The label we wish to give to the column.</li>\n<li><strong>constant</strong>:  The constant value we wish to populate the column.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A Column object populated with a configured Constant lookup engine.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">constant</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.direction": {"fullname": "datachef.direction", "modulename": "datachef.direction", "kind": "module", "doc": "<p></p>\n"}, "datachef.direction.directions": {"fullname": "datachef.direction.directions", "modulename": "datachef.direction.directions", "kind": "module", "doc": "<p></p>\n"}, "datachef.direction.directions.BaseDirection": {"fullname": "datachef.direction.directions.BaseDirection", "modulename": "datachef.direction.directions", "qualname": "BaseDirection", "kind": "class", "doc": "<p></p>\n"}, "datachef.direction.directions.Direction": {"fullname": "datachef.direction.directions.Direction", "modulename": "datachef.direction.directions", "qualname": "Direction", "kind": "function", "doc": "<p>A class representing a cardinal direction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x: The horizontal offset. For example</strong>: \n1 = one space, right, -1 = one position left.</li>\n<li><strong>y: The vertical offset. For example</strong>: \n1 = one space down, -1 = one position left.</li>\n<li><strong>name</strong>:  The name of the direction</li>\n<li><strong>_locked</strong>:  Can this directions offset be overwritten.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">_locked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "datachef.direction.directions.up": {"fullname": "datachef.direction.directions.up", "modulename": "datachef.direction.directions", "qualname": "up", "kind": "variable", "doc": "<p></p>\n", "default_value": "Direction(x=0, y=-1, name=&#x27;up&#x27;, _locked=False)"}, "datachef.direction.directions.above": {"fullname": "datachef.direction.directions.above", "modulename": "datachef.direction.directions", "qualname": "above", "kind": "variable", "doc": "<p></p>\n", "default_value": "Direction(x=0, y=-1, name=&#x27;above&#x27;, _locked=False)"}, "datachef.direction.directions.down": {"fullname": "datachef.direction.directions.down", "modulename": "datachef.direction.directions", "qualname": "down", "kind": "variable", "doc": "<p></p>\n", "default_value": "Direction(x=0, y=1, name=&#x27;down&#x27;, _locked=False)"}, "datachef.direction.directions.below": {"fullname": "datachef.direction.directions.below", "modulename": "datachef.direction.directions", "qualname": "below", "kind": "variable", "doc": "<p></p>\n", "default_value": "Direction(x=0, y=1, name=&#x27;below&#x27;, _locked=False)"}, "datachef.direction.directions.right": {"fullname": "datachef.direction.directions.right", "modulename": "datachef.direction.directions", "qualname": "right", "kind": "variable", "doc": "<p></p>\n", "default_value": "Direction(x=1, y=0, name=&#x27;right&#x27;, _locked=False)"}, "datachef.direction.directions.left": {"fullname": "datachef.direction.directions.left", "modulename": "datachef.direction.directions", "qualname": "left", "kind": "variable", "doc": "<p></p>\n", "default_value": "Direction(x=-1, y=0, name=&#x27;left&#x27;, _locked=False)"}, "datachef.exceptions": {"fullname": "datachef.exceptions", "modulename": "datachef.exceptions", "kind": "module", "doc": "<p></p>\n"}, "datachef.exceptions.badparams": {"fullname": "datachef.exceptions.badparams", "modulename": "datachef.exceptions.badparams", "kind": "module", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.BadExcelReferenceError": {"fullname": "datachef.exceptions.badparams.BadExcelReferenceError", "modulename": "datachef.exceptions.badparams", "qualname": "BadExcelReferenceError", "kind": "class", "doc": "<p>Raised where the user has provided an excel reference that does not match\nthe known patterns for excel references.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"fullname": "datachef.exceptions.badparams.BadExcelReferenceError.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "BadExcelReferenceError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"fullname": "datachef.exceptions.badparams.BadExcelReferenceError.msg", "modulename": "datachef.exceptions.badparams", "qualname": "BadExcelReferenceError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.BadShiftParameterError": {"fullname": "datachef.exceptions.badparams.BadShiftParameterError", "modulename": "datachef.exceptions.badparams", "qualname": "BadShiftParameterError", "kind": "class", "doc": "<p>Raised where someone has provided incorrect inputs to the\nshift method.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"fullname": "datachef.exceptions.badparams.BadShiftParameterError.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "BadShiftParameterError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"fullname": "datachef.exceptions.badparams.BadShiftParameterError.msg", "modulename": "datachef.exceptions.badparams", "qualname": "BadShiftParameterError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"fullname": "datachef.exceptions.badparams.CardinalDeclarationWithOffset", "modulename": "datachef.exceptions.badparams", "qualname": "CardinalDeclarationWithOffset", "kind": "class", "doc": "<p>User had tried to pass in an argument to a direction\nin a context where its just being used to declare an\nabsolute cardinal direction.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"fullname": "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "CardinalDeclarationWithOffset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"fullname": "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg", "modulename": "datachef.exceptions.badparams", "qualname": "CardinalDeclarationWithOffset.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"fullname": "datachef.exceptions.badparams.WithinAxisDeclarationError", "modulename": "datachef.exceptions.badparams", "qualname": "WithinAxisDeclarationError", "kind": "class", "doc": "<p>Raised where a user is attempting a within lookup but is\nmixing axis.</p>\n\n<p>i.e we must be scanning between two directions along a\nsingle axis, eg:</p>\n\n<ul>\n<li>left to right</li>\n<li>up to down</li>\n<li>below to above\netc</li>\n</ul>\n\n<p>We cannot scan up to left, above to right etc.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"fullname": "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "WithinAxisDeclarationError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"fullname": "datachef.exceptions.badparams.WithinAxisDeclarationError.msg", "modulename": "datachef.exceptions.badparams", "qualname": "WithinAxisDeclarationError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.OutputPassedToPreview": {"fullname": "datachef.exceptions.badparams.OutputPassedToPreview", "modulename": "datachef.exceptions.badparams", "qualname": "OutputPassedToPreview", "kind": "class", "doc": "<p>User it trying to call preview() with a TidyData class\nin place of Selectables</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"fullname": "datachef.exceptions.badparams.OutputPassedToPreview.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "OutputPassedToPreview.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"fullname": "datachef.exceptions.badparams.OutputPassedToPreview.msg", "modulename": "datachef.exceptions.badparams", "qualname": "OutputPassedToPreview.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.ReversedExcelRefError": {"fullname": "datachef.exceptions.badparams.ReversedExcelRefError", "modulename": "datachef.exceptions.badparams", "qualname": "ReversedExcelRefError", "kind": "class", "doc": "<p>Raised where a user has provided an excel reference in a reversed format.</p>\n\n<p>Example:\nC5:A2</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"fullname": "datachef.exceptions.badparams.ReversedExcelRefError.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "ReversedExcelRefError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"fullname": "datachef.exceptions.badparams.ReversedExcelRefError.msg", "modulename": "datachef.exceptions.badparams", "qualname": "ReversedExcelRefError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.badparams.UnknownDirectionError": {"fullname": "datachef.exceptions.badparams.UnknownDirectionError", "modulename": "datachef.exceptions.badparams", "qualname": "UnknownDirectionError", "kind": "class", "doc": "<p>User has passed in a direction that is not a valid direction</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"fullname": "datachef.exceptions.badparams.UnknownDirectionError.__init__", "modulename": "datachef.exceptions.badparams", "qualname": "UnknownDirectionError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"fullname": "datachef.exceptions.badparams.UnknownDirectionError.msg", "modulename": "datachef.exceptions.badparams", "qualname": "UnknownDirectionError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.cells": {"fullname": "datachef.exceptions.cells", "modulename": "datachef.exceptions.cells", "kind": "module", "doc": "<p></p>\n"}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"fullname": "datachef.exceptions.cells.NonExistentCellComparissonError", "modulename": "datachef.exceptions.cells", "qualname": "NonExistentCellComparissonError", "kind": "class", "doc": "<p>User is trying to to make a positional comparison between an\nexistant cell (i.e a cell parsed from a tabulated source) and\na virtual cell created by a constant or other external input.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"fullname": "datachef.exceptions.cells.NonExistentCellComparissonError.__init__", "modulename": "datachef.exceptions.cells", "qualname": "NonExistentCellComparissonError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"fullname": "datachef.exceptions.cells.NonExistentCellComparissonError.msg", "modulename": "datachef.exceptions.cells", "qualname": "NonExistentCellComparissonError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.cells.InvlaidCellPositionError": {"fullname": "datachef.exceptions.cells.InvlaidCellPositionError", "modulename": "datachef.exceptions.cells", "qualname": "InvlaidCellPositionError", "kind": "class", "doc": "<p>Raised where a cell has a value for one positional index but no the other.</p>\n\n<p>Examples:\ny has a value but x does not\nx has a value but y does not</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"fullname": "datachef.exceptions.cells.InvlaidCellPositionError.__init__", "modulename": "datachef.exceptions.cells", "qualname": "InvlaidCellPositionError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"fullname": "datachef.exceptions.cells.InvlaidCellPositionError.msg", "modulename": "datachef.exceptions.cells", "qualname": "InvlaidCellPositionError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common": {"fullname": "datachef.exceptions.common", "modulename": "datachef.exceptions.common", "kind": "module", "doc": "<p></p>\n"}, "datachef.exceptions.common.FileInputError": {"fullname": "datachef.exceptions.common.FileInputError", "modulename": "datachef.exceptions.common", "qualname": "FileInputError", "kind": "class", "doc": "<p>There is an issues with what has been provided as a file input.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.FileInputError.__init__": {"fullname": "datachef.exceptions.common.FileInputError.__init__", "modulename": "datachef.exceptions.common", "qualname": "FileInputError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "datachef.exceptions.common.FileInputError.msg": {"fullname": "datachef.exceptions.common.FileInputError.msg", "modulename": "datachef.exceptions.common", "qualname": "FileInputError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.CellsDoNotExistError": {"fullname": "datachef.exceptions.common.CellsDoNotExistError", "modulename": "datachef.exceptions.common", "qualname": "CellsDoNotExistError", "kind": "class", "doc": "<p>User is trying to select something from the filtered table that\ndoes not exist in the filtered table.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"fullname": "datachef.exceptions.common.CellsDoNotExistError.__init__", "modulename": "datachef.exceptions.common", "qualname": "CellsDoNotExistError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"fullname": "datachef.exceptions.common.CellsDoNotExistError.msg", "modulename": "datachef.exceptions.common", "qualname": "CellsDoNotExistError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"fullname": "datachef.exceptions.common.LoneValueOnMultipleCellsError", "modulename": "datachef.exceptions.common", "qualname": "LoneValueOnMultipleCellsError", "kind": "class", "doc": "<p>Raised when a user attempts to use the Input.long_value() method\non a selection of more than one cell.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"fullname": "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__", "modulename": "datachef.exceptions.common", "qualname": "LoneValueOnMultipleCellsError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"fullname": "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg", "modulename": "datachef.exceptions.common", "qualname": "LoneValueOnMultipleCellsError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.InvalidCellObjectError": {"fullname": "datachef.exceptions.common.InvalidCellObjectError", "modulename": "datachef.exceptions.common", "qualname": "InvalidCellObjectError", "kind": "class", "doc": "<p>Raised where a cell object is missing required attributes or\nsaid attributes hold invalid types or values.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"fullname": "datachef.exceptions.common.InvalidCellObjectError.__init__", "modulename": "datachef.exceptions.common", "qualname": "InvalidCellObjectError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"fullname": "datachef.exceptions.common.InvalidCellObjectError.msg", "modulename": "datachef.exceptions.common", "qualname": "InvalidCellObjectError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.UnalignedTableOperation": {"fullname": "datachef.exceptions.common.UnalignedTableOperation", "modulename": "datachef.exceptions.common", "qualname": "UnalignedTableOperation", "kind": "class", "doc": "<p>Raised where a user it trying to combine cell selections from two\ndistinctly separate inputs.</p>\n\n<p>This is invalid, as each input represents a subset (up to the whole of)\na single distinct source of tabulated data.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"fullname": "datachef.exceptions.common.UnalignedTableOperation.__init__", "modulename": "datachef.exceptions.common", "qualname": "UnalignedTableOperation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"fullname": "datachef.exceptions.common.UnalignedTableOperation.msg", "modulename": "datachef.exceptions.common", "qualname": "UnalignedTableOperation.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.InvalidTableSignatures": {"fullname": "datachef.exceptions.common.InvalidTableSignatures", "modulename": "datachef.exceptions.common", "qualname": "InvalidTableSignatures", "kind": "class", "doc": "<p>Raised where someone is constructing a LiveTable from two\nnon identical tables.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"fullname": "datachef.exceptions.common.InvalidTableSignatures.__init__", "modulename": "datachef.exceptions.common", "qualname": "InvalidTableSignatures.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"fullname": "datachef.exceptions.common.InvalidTableSignatures.msg", "modulename": "datachef.exceptions.common", "qualname": "InvalidTableSignatures.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.OutOfBoundsError": {"fullname": "datachef.exceptions.common.OutOfBoundsError", "modulename": "datachef.exceptions.common", "qualname": "OutOfBoundsError", "kind": "class", "doc": "<p>Raised when a users attempts to select or reference a cell\noutside of the boundary of the pristine table of input cells.</p>\n\n<p>Example: Selecting every cell then shifting RIGHT 1 position\nwould be trying to select a rightmost column of data that\ndoes not exist in the table.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"fullname": "datachef.exceptions.common.OutOfBoundsError.__init__", "modulename": "datachef.exceptions.common", "qualname": "OutOfBoundsError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.OutOfBoundsError.msg": {"fullname": "datachef.exceptions.common.OutOfBoundsError.msg", "modulename": "datachef.exceptions.common", "qualname": "OutOfBoundsError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.ImpossibleLookupError": {"fullname": "datachef.exceptions.common.ImpossibleLookupError", "modulename": "datachef.exceptions.common", "qualname": "ImpossibleLookupError", "kind": "class", "doc": "<p>Raised when a user is attempting a lookup that is impossible\nto resolve.</p>\n\n<p>For example: looming up to a cell that is \"above\" directionally\nwhen no cells in the direction have been selected.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"fullname": "datachef.exceptions.common.ImpossibleLookupError.__init__", "modulename": "datachef.exceptions.common", "qualname": "ImpossibleLookupError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"fullname": "datachef.exceptions.common.ImpossibleLookupError.msg", "modulename": "datachef.exceptions.common", "qualname": "ImpossibleLookupError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.MissingLabelError": {"fullname": "datachef.exceptions.common.MissingLabelError", "modulename": "datachef.exceptions.common", "qualname": "MissingLabelError", "kind": "class", "doc": "<p>Raised where a user is trying to construct an output with a\nselection of cells but has not yet labelled that selection of\ncells</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.MissingLabelError.__init__": {"fullname": "datachef.exceptions.common.MissingLabelError.__init__", "modulename": "datachef.exceptions.common", "qualname": "MissingLabelError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.MissingLabelError.msg": {"fullname": "datachef.exceptions.common.MissingLabelError.msg", "modulename": "datachef.exceptions.common", "qualname": "MissingLabelError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.BadConditionalResolverError": {"fullname": "datachef.exceptions.common.BadConditionalResolverError", "modulename": "datachef.exceptions.common", "qualname": "BadConditionalResolverError", "kind": "class", "doc": "<p>Raised where a user has specified a HorizontalCondition\nlookup engine that has incorrect arguments or returns\nas incorrect types.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"fullname": "datachef.exceptions.common.BadConditionalResolverError.__init__", "modulename": "datachef.exceptions.common", "qualname": "BadConditionalResolverError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"fullname": "datachef.exceptions.common.BadConditionalResolverError.msg", "modulename": "datachef.exceptions.common", "qualname": "BadConditionalResolverError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"fullname": "datachef.exceptions.common.HorizontalConditionalHeaderError", "modulename": "datachef.exceptions.common", "qualname": "HorizontalConditionalHeaderError", "kind": "class", "doc": "<p>Raised where a user has specified a HorizontalCondition\nlookup engine but its failing to resolve as an expected\ncolumn value is missing.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"fullname": "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__", "modulename": "datachef.exceptions.common", "qualname": "HorizontalConditionalHeaderError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"fullname": "datachef.exceptions.common.HorizontalConditionalHeaderError.msg", "modulename": "datachef.exceptions.common", "qualname": "HorizontalConditionalHeaderError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"fullname": "datachef.exceptions.common.PreviewBoundarySpecificationError", "modulename": "datachef.exceptions.common", "qualname": "PreviewBoundarySpecificationError", "kind": "class", "doc": "<p>Raised where a user is trying to create a preview with a\nset boundary but has provided incorrect parameters.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"fullname": "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__", "modulename": "datachef.exceptions.common", "qualname": "PreviewBoundarySpecificationError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"fullname": "datachef.exceptions.common.PreviewBoundarySpecificationError.msg", "modulename": "datachef.exceptions.common", "qualname": "PreviewBoundarySpecificationError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.MisalignedHeadersError": {"fullname": "datachef.exceptions.common.MisalignedHeadersError", "modulename": "datachef.exceptions.common", "qualname": "MisalignedHeadersError", "kind": "class", "doc": "<p>Raised where a user is attempting to join together two\nTidyData outputs but those outputs do not have the\nsame column headers.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"fullname": "datachef.exceptions.common.MisalignedHeadersError.__init__", "modulename": "datachef.exceptions.common", "qualname": "MisalignedHeadersError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"fullname": "datachef.exceptions.common.MisalignedHeadersError.msg", "modulename": "datachef.exceptions.common", "qualname": "MisalignedHeadersError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.CellValidationError": {"fullname": "datachef.exceptions.common.CellValidationError", "modulename": "datachef.exceptions.common", "qualname": "CellValidationError", "kind": "class", "doc": "<p>Raised where we're validated a call value and\nfound it to me invalid.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.CellValidationError.__init__": {"fullname": "datachef.exceptions.common.CellValidationError.__init__", "modulename": "datachef.exceptions.common", "qualname": "CellValidationError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.CellValidationError.msg": {"fullname": "datachef.exceptions.common.CellValidationError.msg", "modulename": "datachef.exceptions.common", "qualname": "CellValidationError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.common.DroppingNonColumnError": {"fullname": "datachef.exceptions.common.DroppingNonColumnError", "modulename": "datachef.exceptions.common", "qualname": "DroppingNonColumnError", "kind": "class", "doc": "<p>Raised where a user is trying to drop a column\nduring the transformation to tidy data but that\ncolumn does not exist.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"fullname": "datachef.exceptions.common.DroppingNonColumnError.__init__", "modulename": "datachef.exceptions.common", "qualname": "DroppingNonColumnError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"fullname": "datachef.exceptions.common.DroppingNonColumnError.msg", "modulename": "datachef.exceptions.common", "qualname": "DroppingNonColumnError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.lookups": {"fullname": "datachef.exceptions.lookups", "modulename": "datachef.exceptions.lookups", "kind": "module", "doc": "<p></p>\n"}, "datachef.exceptions.lookups.AmbiguousLookupError": {"fullname": "datachef.exceptions.lookups.AmbiguousLookupError", "modulename": "datachef.exceptions.lookups", "qualname": "AmbiguousLookupError", "kind": "class", "doc": "<p>Raised where a user has configured a lookup engine such that it\ncannot concretely resolve a lookup against one of more observation\ncells.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"fullname": "datachef.exceptions.lookups.AmbiguousLookupError.__init__", "modulename": "datachef.exceptions.lookups", "qualname": "AmbiguousLookupError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"fullname": "datachef.exceptions.lookups.AmbiguousLookupError.msg", "modulename": "datachef.exceptions.lookups", "qualname": "AmbiguousLookupError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.lookups.MissingDirectLookupError": {"fullname": "datachef.exceptions.lookups.MissingDirectLookupError", "modulename": "datachef.exceptions.lookups", "qualname": "MissingDirectLookupError", "kind": "class", "doc": "<p>Raised where a user has specified a direct lookup but there is\nnot value in the direction specified.</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"fullname": "datachef.exceptions.lookups.MissingDirectLookupError.__init__", "modulename": "datachef.exceptions.lookups", "qualname": "MissingDirectLookupError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"fullname": "datachef.exceptions.lookups.MissingDirectLookupError.msg", "modulename": "datachef.exceptions.lookups", "qualname": "MissingDirectLookupError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.exceptions.lookups.FailedLookupError": {"fullname": "datachef.exceptions.lookups.FailedLookupError", "modulename": "datachef.exceptions.lookups", "qualname": "FailedLookupError", "kind": "class", "doc": "<p>Raised where a lookup engine fails to resolve a result cell</p>\n", "bases": "builtins.Exception"}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"fullname": "datachef.exceptions.lookups.FailedLookupError.__init__", "modulename": "datachef.exceptions.lookups", "qualname": "FailedLookupError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, "datachef.exceptions.lookups.FailedLookupError.msg": {"fullname": "datachef.exceptions.lookups.FailedLookupError.msg", "modulename": "datachef.exceptions.lookups", "qualname": "FailedLookupError.msg", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup": {"fullname": "datachef.lookup", "modulename": "datachef.lookup", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.base": {"fullname": "datachef.lookup.base", "modulename": "datachef.lookup.base", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.base.BaseLookupEngine": {"fullname": "datachef.lookup.base.BaseLookupEngine", "modulename": "datachef.lookup.base", "qualname": "BaseLookupEngine", "kind": "class", "doc": "<p>The base class all lookup engines are built upon.</p>\n"}, "datachef.lookup.base.BaseLookupEngine.resolve": {"fullname": "datachef.lookup.base.BaseLookupEngine.resolve", "modulename": "datachef.lookup.base", "qualname": "BaseLookupEngine.resolve", "kind": "function", "doc": "<p>Given a single observation cell, resolve\nthe lookup, returning the relevant cell\nvalue as defined by this visual relationship.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines": {"fullname": "datachef.lookup.engines", "modulename": "datachef.lookup.engines", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest": {"fullname": "datachef.lookup.engines.closest", "modulename": "datachef.lookup.engines.closest", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.HIGHEST": {"fullname": "datachef.lookup.engines.closest.HIGHEST", "modulename": "datachef.lookup.engines.closest", "qualname": "HIGHEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "9999999999999"}, "datachef.lookup.engines.closest.LOWEST": {"fullname": "datachef.lookup.engines.closest.LOWEST", "modulename": "datachef.lookup.engines.closest", "qualname": "LOWEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, "datachef.lookup.engines.closest.CellRange": {"fullname": "datachef.lookup.engines.closest.CellRange", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange", "kind": "class", "doc": "<p>A class representing a range of cells</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>low</strong>:  the lowest index in the range</li>\n<li><strong>high</strong>:  the highest index in the range</li>\n<li><strong>cell</strong>:  the cell the spanning range resolves to\n:direction: the direction of traversal for the lookup</li>\n</ul>\n"}, "datachef.lookup.engines.closest.CellRange.__init__": {"fullname": "datachef.lookup.engines.closest.CellRange.__init__", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">low</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">high</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span></span>)</span>"}, "datachef.lookup.engines.closest.CellRange.low": {"fullname": "datachef.lookup.engines.closest.CellRange.low", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.low", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "datachef.lookup.engines.closest.CellRange.high": {"fullname": "datachef.lookup.engines.closest.CellRange.high", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.high", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "datachef.lookup.engines.closest.CellRange.cell": {"fullname": "datachef.lookup.engines.closest.CellRange.cell", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.cell", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datachef.models.source.cell.Cell"}, "datachef.lookup.engines.closest.CellRange.direction": {"fullname": "datachef.lookup.engines.closest.CellRange.direction", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.direction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;function Direction at 0x10fae2dd0&gt;"}, "datachef.lookup.engines.closest.CellRange.axis_text": {"fullname": "datachef.lookup.engines.closest.CellRange.axis_text", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.axis_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "datachef.lookup.engines.closest.CellRange.contains": {"fullname": "datachef.lookup.engines.closest.CellRange.contains", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.contains", "kind": "function", "doc": "<p>Does this cell contain the range\nin question.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  The cell we want to check is in the range</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"fullname": "datachef.lookup.engines.closest.CellRange.spans_higher_range_than", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.spans_higher_range_than", "kind": "function", "doc": "<p>Does this range cover a range of indexes higher that the\nindex of a given cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  The cell this range may or may not span a higher\nrange than.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"fullname": "datachef.lookup.engines.closest.CellRange.spans_lower_range_than", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRange.spans_lower_range_than", "kind": "function", "doc": "<p>Does this range cover a range of indexes lower that the\nindex of a given cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  The cell this range may or may not span a lower\nrange than.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.closest.CellRanges": {"fullname": "datachef.lookup.engines.closest.CellRanges", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges", "kind": "class", "doc": "<p>A class representing multiple cell ranges</p>\n"}, "datachef.lookup.engines.closest.CellRanges.__init__": {"fullname": "datachef.lookup.engines.closest.CellRanges.__init__", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.__init__", "kind": "function", "doc": "<p>selection: The selection of cells to create the cell ranges from\n:direction: The direction of traversal considered when constructing ranges</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">LiveTable</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "datachef.lookup.engines.closest.CellRanges.direction": {"fullname": "datachef.lookup.engines.closest.CellRanges.direction", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.direction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;function Direction at 0x10fae2dd0&gt;"}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"fullname": "datachef.lookup.engines.closest.CellRanges.highest_possible_offset", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.highest_possible_offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"fullname": "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.lowest_possible_offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, "datachef.lookup.engines.closest.CellRanges.table": {"fullname": "datachef.lookup.engines.closest.CellRanges.table", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.table", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"fullname": "datachef.lookup.engines.closest.CellRanges.axis_text", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.axis_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"fullname": "datachef.lookup.engines.closest.CellRanges.get_range_by_index", "modulename": "datachef.lookup.engines.closest", "qualname": "CellRanges.get_range_by_index", "kind": "function", "doc": "<p>Get a single constructed range by index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong>:  Index of the range to get</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">closest</span><span class=\"o\">.</span><span class=\"n\">CellRange</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.closest.Closest": {"fullname": "datachef.lookup.engines.closest.Closest", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest", "kind": "class", "doc": "<p>The base class all lookup engines are built upon.</p>\n", "bases": "datachef.lookup.base.BaseLookupEngine"}, "datachef.lookup.engines.closest.Closest.__init__": {"fullname": "datachef.lookup.engines.closest.Closest.__init__", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.__init__", "kind": "function", "doc": "<p>Creates a lookup engine to column values defined via\nthe closest visual relationship.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong>:  The label of the column informed\nby this lookup engine.</li>\n<li>direction: one of up,down,left,right,above,below</li>\n<li>Selection: the selection of cells that hold the column values being looked to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">LiveTable</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unnamed Table&#39;</span></span>)</span>"}, "datachef.lookup.engines.closest.Closest.table": {"fullname": "datachef.lookup.engines.closest.Closest.table", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.table", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.Closest.direction": {"fullname": "datachef.lookup.engines.closest.Closest.direction", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.direction", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.Closest.ranges": {"fullname": "datachef.lookup.engines.closest.Closest.ranges", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.ranges", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.Closest.bumped": {"fullname": "datachef.lookup.engines.closest.Closest.bumped", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.bumped", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.Closest.start_index": {"fullname": "datachef.lookup.engines.closest.Closest.start_index", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.start_index", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.Closest.label": {"fullname": "datachef.lookup.engines.closest.Closest.label", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.label", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.closest.Closest.resolve": {"fullname": "datachef.lookup.engines.closest.Closest.resolve", "modulename": "datachef.lookup.engines.closest", "qualname": "Closest.resolve", "kind": "function", "doc": "<p>Given the cell we want to lookup the relative column value for, use\na bisection search to identify the correct range in our ordered list of ranges.</p>\n\n<p>Note - this method is called recursively, using the kwargs to start\nagain at a different point in the indexed list of ranges.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong>:  The index of the last range we looked at</li>\n<li><strong>cell</strong>:  The cell we're trying to find the correct range for</li>\n<li><strong>ceiling</strong>:  The lowest range index to consider</li>\n<li><strong>floor</strong>:  The highest range index to consider</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The datachef Cell object representing the\n  column cell.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ceiling</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">floor</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.constant": {"fullname": "datachef.lookup.engines.constant", "modulename": "datachef.lookup.engines.constant", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.engines.constant.Constant": {"fullname": "datachef.lookup.engines.constant.Constant", "modulename": "datachef.lookup.engines.constant", "qualname": "Constant", "kind": "class", "doc": "<p>A class to resolve a direct lookup between\nan observation cell and a single constant\nvalue.</p>\n", "bases": "datachef.lookup.base.BaseLookupEngine"}, "datachef.lookup.engines.constant.Constant.__init__": {"fullname": "datachef.lookup.engines.constant.Constant.__init__", "modulename": "datachef.lookup.engines.constant", "qualname": "Constant.__init__", "kind": "function", "doc": "<p>A class to resolve a direct lookup between\nan observation cell and a single constant\nvalue.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong>:  The label of the column informed\nby this lookup engine.</li>\n<li><strong>value</strong>:  The constant value we want this\nlookup engine to return.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "datachef.lookup.engines.constant.Constant.cell": {"fullname": "datachef.lookup.engines.constant.Constant.cell", "modulename": "datachef.lookup.engines.constant", "qualname": "Constant.cell", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.constant.Constant.label": {"fullname": "datachef.lookup.engines.constant.Constant.label", "modulename": "datachef.lookup.engines.constant", "qualname": "Constant.label", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.constant.Constant.resolve": {"fullname": "datachef.lookup.engines.constant.Constant.resolve", "modulename": "datachef.lookup.engines.constant", "qualname": "Constant.resolve", "kind": "function", "doc": "<p>Regardless of the observation cell,\nreturn the constant cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>_</strong>:  Unused Cell object required to keep api\nsignature in keeping with the other engines</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.lookup.engines.direct": {"fullname": "datachef.lookup.engines.direct", "modulename": "datachef.lookup.engines.direct", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.engines.direct.Directly": {"fullname": "datachef.lookup.engines.direct.Directly", "modulename": "datachef.lookup.engines.direct", "qualname": "Directly", "kind": "class", "doc": "<p>A class to resolve a direct lookup between\na given observation cell and the appropriate\ncell from the selection of cells this class\nis constructed with.</p>\n\n<p>This appropriate cell is resolved based on the\nspecified cardinal direction.</p>\n\n<p>Where no value exists in the direction specified\nan exception is raised.</p>\n", "bases": "datachef.lookup.base.BaseLookupEngine"}, "datachef.lookup.engines.direct.Directly.__init__": {"fullname": "datachef.lookup.engines.direct.Directly.__init__", "modulename": "datachef.lookup.engines.direct", "qualname": "Directly.__init__", "kind": "function", "doc": "<p>A class to resolve a direct lookup between\na given observation cell and the appropriate\ncell from the selection of cells this class\nis constructed with.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong>:  The label of the column informed\nby this lookup engine.</li>\n<li>direction: one of up,down,left,right,above,below</li>\n<li>Selection: the selection of cells that hold the column values being looked to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">LiveTable</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unnamed Table&#39;</span></span>)</span>"}, "datachef.lookup.engines.direct.Directly.table": {"fullname": "datachef.lookup.engines.direct.Directly.table", "modulename": "datachef.lookup.engines.direct", "qualname": "Directly.table", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.direct.Directly.label": {"fullname": "datachef.lookup.engines.direct.Directly.label", "modulename": "datachef.lookup.engines.direct", "qualname": "Directly.label", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.direct.Directly.direction": {"fullname": "datachef.lookup.engines.direct.Directly.direction", "modulename": "datachef.lookup.engines.direct", "qualname": "Directly.direction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;function Direction at 0x10fae2dd0&gt;"}, "datachef.lookup.engines.direct.Directly.resolve": {"fullname": "datachef.lookup.engines.direct.Directly.resolve", "modulename": "datachef.lookup.engines.direct", "qualname": "Directly.resolve", "kind": "function", "doc": "<p>Given an observation cell, return the\nappropriate cell as declared via this\nvisual relationship.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  The datachef Cell object we're trying\nto resolve the relative column cell object for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The datachef Cell object representing the\n  column cell.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.horizontal_condition": {"fullname": "datachef.lookup.engines.horizontal_condition", "modulename": "datachef.lookup.engines.horizontal_condition", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition", "kind": "class", "doc": "<p>A lookup engine to populate the contents of a column based\non the values resolved for the other columns on the row.</p>\n", "bases": "datachef.lookup.base.BaseLookupEngine"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition.__init__", "kind": "function", "doc": "<p>A lookup engine to populate the contents of a column based\non the values resolved for the other columns on the row.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong>:  The label of the column informed\nby this lookup engine.</li>\n<li><strong>resolver</strong>:  The callable that will create the new column value</li>\n<li><strong>priority</strong>:  The priority used when resolving multiple horizontal\nconditions, 0 is highest priority and the default.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">resolver</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unnamed Table&#39;</span></span>)</span>"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition.label", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition.resolver", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition.priority", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition.table", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"fullname": "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve", "modulename": "datachef.lookup.engines.horizontal_condition", "qualname": "HorizontalCondition.resolve", "kind": "function", "doc": "<p>For a given observation row (as denoted by the unused Cell argument),\nresolve the</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>_</strong>:  Unused datachef cell object representing the observation in\nquestion. Required to match api signature used by other look engines.</li>\n<li><strong>cells_on_row</strong>:  Dictionary containing contents of other\ncolumns already resolve against the observation cell.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value for the column.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>,</span><span class=\"param\">\t<span class=\"n\">cells_on_row</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">VirtualCell</span>:</span></span>", "funcdef": "def"}, "datachef.lookup.engines.within": {"fullname": "datachef.lookup.engines.within", "modulename": "datachef.lookup.engines.within", "kind": "module", "doc": "<p></p>\n"}, "datachef.lookup.engines.within.Within": {"fullname": "datachef.lookup.engines.within.Within", "modulename": "datachef.lookup.engines.within", "qualname": "Within", "kind": "class", "doc": "<p>The base class all lookup engines are built upon.</p>\n", "bases": "datachef.lookup.base.BaseLookupEngine"}, "datachef.lookup.engines.within.Within.__init__": {"fullname": "datachef.lookup.engines.within.Within.__init__", "modulename": "datachef.lookup.engines.within", "qualname": "Within.__init__", "kind": "function", "doc": "<p>Creates a lookup engine to resolve a Within lookup.</p>\n\n<p>Imagine the following example:</p>\n\n<p>|  A   |  B   |  C   |  D   |  E   |  F   |  G   |\n|      |      |      |      |      |      |      |\n|      | age1 |      |      |      | age2 |      |\n| ob1  | ob2  | ob3  |      | ob4  | ob5  | ob6  |</p>\n\n<p>The relationships between the age dimension (age1 and age2 in the example)\nis both LEFT and RIGHT, relative to a given observation.</p>\n\n<p>Consider the following code:\nWithin(cells, up, from=left(1), to=right(1))</p>\n\n<p>This is specifying age is above the observation, but only within the range of\none to the left through 1 to the right.</p>\n\n<p>So in that example, we're searching (from the observation) for an age dimension\ncell via the following pattern.</p>\n\n<table>\n<thead>\n<tr>\n  <th>A</th>\n  <th>B</th>\n  <th>C</th>\n  <th>D</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>7</td>\n  <td>8</td>\n  <td>9</td>\n  <td></td>\n</tr>\n<tr>\n  <td>4</td>\n  <td>5</td>\n  <td>6</td>\n  <td></td>\n</tr>\n<tr>\n  <td>1</td>\n  <td>2</td>\n  <td>3</td>\n  <td></td>\n</tr>\n<tr>\n  <td></td>\n  <td>ob</td>\n  <td></td>\n  <td></td>\n</tr>\n</tbody>\n</table>\n\n<p>With the header cell we're \"looking up\" being the first of the cells we've labelled\n1-9 (in that order) that is a cell we've also defined via the selection parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong>:  The label of the column informed\nby this lookup engine.</li>\n<li><strong>Selection</strong>:  the selection of cells that hold the column values being looked to.</li>\n<li><strong>direction</strong>:  cardinal direction declaration.</li>\n<li><strong>start</strong>:  a direction with an altered positional offset to indicate beginning of\ncell range to scan.</li>\n<li><strong>end</strong>:  a direction with an altered positional offset to indicate end of\ncell range to scan.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">LiveTable</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Unnamed Table&#39;</span></span>)</span>"}, "datachef.lookup.engines.within.Within.label": {"fullname": "datachef.lookup.engines.within.Within.label", "modulename": "datachef.lookup.engines.within", "qualname": "Within.label", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.within.Within.table": {"fullname": "datachef.lookup.engines.within.Within.table", "modulename": "datachef.lookup.engines.within", "qualname": "Within.table", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.within.Within.start": {"fullname": "datachef.lookup.engines.within.Within.start", "modulename": "datachef.lookup.engines.within", "qualname": "Within.start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;function Direction at 0x10fae2dd0&gt;"}, "datachef.lookup.engines.within.Within.end": {"fullname": "datachef.lookup.engines.within.Within.end", "modulename": "datachef.lookup.engines.within", "qualname": "Within.end", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;function Direction at 0x10fae2dd0&gt;"}, "datachef.lookup.engines.within.Within.direction_of_travel": {"fullname": "datachef.lookup.engines.within.Within.direction_of_travel", "modulename": "datachef.lookup.engines.within", "qualname": "Within.direction_of_travel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;function Direction at 0x10fae2dd0&gt;"}, "datachef.lookup.engines.within.Within.direction": {"fullname": "datachef.lookup.engines.within.Within.direction", "modulename": "datachef.lookup.engines.within", "qualname": "Within.direction", "kind": "variable", "doc": "<p></p>\n"}, "datachef.lookup.engines.within.Within.cells": {"fullname": "datachef.lookup.engines.within.Within.cells", "modulename": "datachef.lookup.engines.within", "qualname": "Within.cells", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[datachef.models.source.cell.Cell]"}, "datachef.lookup.engines.within.Within.resolve": {"fullname": "datachef.lookup.engines.within.Within.resolve", "modulename": "datachef.lookup.engines.within", "qualname": "Within.resolve", "kind": "function", "doc": "<p>Given an observation cell, return the\nappropriate cell as declared via this\nvisual relationship.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cell</strong>:  The datachef Cell we want to resolve a column Cell for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The column Cell we're resolved.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span>:</span></span>", "funcdef": "def"}, "datachef.models": {"fullname": "datachef.models", "modulename": "datachef.models", "kind": "module", "doc": "<p></p>\n"}, "datachef.models.source": {"fullname": "datachef.models.source", "modulename": "datachef.models.source", "kind": "module", "doc": "<p></p>\n"}, "datachef.models.source.cell": {"fullname": "datachef.models.source.cell", "modulename": "datachef.models.source.cell", "kind": "module", "doc": "<p>Classes representing a sinlge cell of data.</p>\n"}, "datachef.models.source.cell.BaseCell": {"fullname": "datachef.models.source.cell.BaseCell", "modulename": "datachef.models.source.cell", "qualname": "BaseCell", "kind": "class", "doc": "<p>A primitive non value holding cell construct.</p>\n"}, "datachef.models.source.cell.BaseCell.__init__": {"fullname": "datachef.models.source.cell.BaseCell.__init__", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "datachef.models.source.cell.BaseCell.x": {"fullname": "datachef.models.source.cell.BaseCell.x", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "datachef.models.source.cell.BaseCell.y": {"fullname": "datachef.models.source.cell.BaseCell.y", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "datachef.models.source.cell.BaseCell.matches_xy": {"fullname": "datachef.models.source.cell.BaseCell.matches_xy", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.matches_xy", "kind": "function", "doc": "<p>Does this objects x and y attributes, match\nthe x and y attributes of the provided BaseCell or Cell\nobject.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other_cell</strong>:  A different datachef BaseCell or\ninheritor of.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True of cells have same table location, else False</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other_cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.cell.BaseCell.is_above": {"fullname": "datachef.models.source.cell.BaseCell.is_above", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.is_above", "kind": "function", "doc": "<p>When compared to a y index, is this\ncell above it?</p>\n\n<p>We mean \"above\" in visual terms, i.e\ndoes it have a lower vertical offset\nfrom the top of the table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  Vertical cell index (row number) to\ncompare to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>is this Cell above this y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.cell.BaseCell.is_below": {"fullname": "datachef.models.source.cell.BaseCell.is_below", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.is_below", "kind": "function", "doc": "<p>When compared to a y index, is this\ncell below it?</p>\n\n<p>We mean \"below\" in visual terms, i.e\ndoes it have a higher vertical offset\nfrom the top of the table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>y</strong>:  Vertical cell index (row number) to\ncompare to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>is this Cell below this y</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.cell.BaseCell.is_right_of": {"fullname": "datachef.models.source.cell.BaseCell.is_right_of", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.is_right_of", "kind": "function", "doc": "<p>When compared to an x index, is this\ncell to the right of it?</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  Horizontal cell index (column number) to\ncompare to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>is this Cell right of x</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.cell.BaseCell.is_left_of": {"fullname": "datachef.models.source.cell.BaseCell.is_left_of", "modulename": "datachef.models.source.cell", "qualname": "BaseCell.is_left_of", "kind": "function", "doc": "<p>When compared to an x index, is this\ncell to the left of it?</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  Horizontal cell index (column number) to\ncompare to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>is this Cell left of x</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.cell.VirtualCell": {"fullname": "datachef.models.source.cell.VirtualCell", "modulename": "datachef.models.source.cell", "qualname": "VirtualCell", "kind": "class", "doc": "<p>Where we are establishing relationships between a concrete cell\nfrom the tabulated data source and a constant or external value\nwe do so via a virtual cell.</p>\n\n<p>VirtualCells are unique amongst cell variants in that they can\nhave None positional values for x and y.</p>\n", "bases": "BaseCell"}, "datachef.models.source.cell.VirtualCell.__init__": {"fullname": "datachef.models.source.cell.VirtualCell.__init__", "modulename": "datachef.models.source.cell", "qualname": "VirtualCell.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "datachef.models.source.cell.VirtualCell.value": {"fullname": "datachef.models.source.cell.VirtualCell.value", "modulename": "datachef.models.source.cell", "qualname": "VirtualCell.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, "datachef.models.source.cell.VirtualCell.x": {"fullname": "datachef.models.source.cell.VirtualCell.x", "modulename": "datachef.models.source.cell", "qualname": "VirtualCell.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": "None"}, "datachef.models.source.cell.VirtualCell.y": {"fullname": "datachef.models.source.cell.VirtualCell.y", "modulename": "datachef.models.source.cell", "qualname": "VirtualCell.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]", "default_value": "None"}, "datachef.models.source.cell.Cell": {"fullname": "datachef.models.source.cell.Cell", "modulename": "datachef.models.source.cell", "qualname": "Cell", "kind": "class", "doc": "<p>Denotes a cell of data from a tabulated data source</p>\n", "bases": "BaseCell"}, "datachef.models.source.cell.Cell.__init__": {"fullname": "datachef.models.source.cell.Cell.__init__", "modulename": "datachef.models.source.cell", "qualname": "Cell.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cellformat</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cellformat</span><span class=\"o\">.</span><span class=\"n\">CellFormatting</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "datachef.models.source.cell.Cell.value": {"fullname": "datachef.models.source.cell.Cell.value", "modulename": "datachef.models.source.cell", "qualname": "Cell.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, "datachef.models.source.cell.Cell.x": {"fullname": "datachef.models.source.cell.Cell.x", "modulename": "datachef.models.source.cell", "qualname": "Cell.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, "datachef.models.source.cell.Cell.y": {"fullname": "datachef.models.source.cell.Cell.y", "modulename": "datachef.models.source.cell", "qualname": "Cell.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, "datachef.models.source.cell.Cell.cellformat": {"fullname": "datachef.models.source.cell.Cell.cellformat", "modulename": "datachef.models.source.cell", "qualname": "Cell.cellformat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datachef.models.source.cellformat.CellFormatting]", "default_value": "None"}, "datachef.models.source.cell.Cell.is_blank": {"fullname": "datachef.models.source.cell.Cell.is_blank", "modulename": "datachef.models.source.cell", "qualname": "Cell.is_blank", "kind": "function", "doc": "<p>Can the contents of the cell be regarded as blank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>disregard_whitespace</strong>:  Flag so we can choose to treat\ncells with just whitespace as populated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disregard_whitespace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.models.source.cell.Cell.is_not_blank": {"fullname": "datachef.models.source.cell.Cell.is_not_blank", "modulename": "datachef.models.source.cell", "qualname": "Cell.is_not_blank", "kind": "function", "doc": "<p>Can the contents of the cell be regarded as not blank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>disregard_whitespace</strong>:  Flag so we can choose to treat\ncells with just whitespace as populated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disregard_whitespace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.models.source.cellformat": {"fullname": "datachef.models.source.cellformat", "modulename": "datachef.models.source.cellformat", "kind": "module", "doc": "<p></p>\n"}, "datachef.models.source.cellformat.CellFormatting": {"fullname": "datachef.models.source.cellformat.CellFormatting", "modulename": "datachef.models.source.cellformat", "qualname": "CellFormatting", "kind": "class", "doc": "<p></p>\n"}, "datachef.models.source.table": {"fullname": "datachef.models.source.table", "modulename": "datachef.models.source.table", "kind": "module", "doc": "<p>Classes representing a single cell of data.</p>\n"}, "datachef.models.source.table.Table": {"fullname": "datachef.models.source.table.Table", "modulename": "datachef.models.source.table", "qualname": "Table", "kind": "class", "doc": "<p>Represents a table of data in the form of a list of cell objects.</p>\n"}, "datachef.models.source.table.Table.__init__": {"fullname": "datachef.models.source.table.Table.__init__", "modulename": "datachef.models.source.table", "qualname": "Table.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "datachef.models.source.table.Table.cells": {"fullname": "datachef.models.source.table.Table.cells", "modulename": "datachef.models.source.table", "qualname": "Table.cells", "kind": "variable", "doc": "<p></p>\n"}, "datachef.models.source.table.Table.add_cell": {"fullname": "datachef.models.source.table.Table.add_cell", "modulename": "datachef.models.source.table", "qualname": "Table.add_cell", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.models.source.table.LiveTable": {"fullname": "datachef.models.source.table.LiveTable", "modulename": "datachef.models.source.table", "qualname": "LiveTable", "kind": "class", "doc": "<p>A \"live\" table is the representation of a changing selection of cells as\ntaken from a single tabulated input, it revolves around the control of\ntwo things:</p>\n\n<p>1.) \"pristine\" - The pristine table as pulled from the source.\n2.) \"filtered\" - The current subset of cells (up to all) as selected from the\n                 pristine table.</p>\n\n<p>Keeping track of the pristine cell selection (the initial table) allows us to\nextend a Table of cells (.filtered) via comparing the two. This enables the\neasy extension of a cell selection as well as the filtering down of one.</p>\n"}, "datachef.models.source.table.LiveTable.__init__": {"fullname": "datachef.models.source.table.LiveTable.__init__", "modulename": "datachef.models.source.table", "qualname": "LiveTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pristine</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">filtered</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "datachef.models.source.table.LiveTable.pristine": {"fullname": "datachef.models.source.table.LiveTable.pristine", "modulename": "datachef.models.source.table", "qualname": "LiveTable.pristine", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datachef.models.source.table.Table"}, "datachef.models.source.table.LiveTable.filtered": {"fullname": "datachef.models.source.table.LiveTable.filtered", "modulename": "datachef.models.source.table", "qualname": "LiveTable.filtered", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datachef.models.source.table.Table"}, "datachef.models.source.table.LiveTable.source": {"fullname": "datachef.models.source.table.LiveTable.source", "modulename": "datachef.models.source.table", "qualname": "LiveTable.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[pathlib.Path, str]"}, "datachef.models.source.table.LiveTable.label": {"fullname": "datachef.models.source.table.LiveTable.label", "modulename": "datachef.models.source.table", "qualname": "LiveTable.label", "kind": "variable", "doc": "<p>Accessor for current label of current selection of cells.</p>\n"}, "datachef.models.source.table.LiveTable.label_as": {"fullname": "datachef.models.source.table.LiveTable.label_as", "modulename": "datachef.models.source.table", "qualname": "LiveTable.label_as", "kind": "function", "doc": "<p>Assign a label to this specific selection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.models.source.table.LiveTable.name": {"fullname": "datachef.models.source.table.LiveTable.name", "modulename": "datachef.models.source.table", "qualname": "LiveTable.name", "kind": "variable", "doc": "<p>Return a name if we have a name, else raises</p>\n"}, "datachef.models.source.table.LiveTable.cells": {"fullname": "datachef.models.source.table.LiveTable.cells", "modulename": "datachef.models.source.table", "qualname": "LiveTable.cells", "kind": "variable", "doc": "<p>Accessor for currently selected cells from the\ncurrently selected table</p>\n", "annotation": ": List[datachef.models.source.cell.Cell]"}, "datachef.models.source.table.LiveTable.pcells": {"fullname": "datachef.models.source.table.LiveTable.pcells", "modulename": "datachef.models.source.table", "qualname": "LiveTable.pcells", "kind": "variable", "doc": "<p>Accessor for the pristine cells from the\ncurrently selected table</p>\n", "annotation": ": List[datachef.models.source.cell.BaseCell]"}, "datachef.models.source.table.LiveTable.selections_made": {"fullname": "datachef.models.source.table.LiveTable.selections_made", "modulename": "datachef.models.source.table", "qualname": "LiveTable.selections_made", "kind": "function", "doc": "<p>Have any selections been made</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.table.LiveTable.confirm_valid": {"fullname": "datachef.models.source.table.LiveTable.confirm_valid", "modulename": "datachef.models.source.table", "qualname": "LiveTable.confirm_valid", "kind": "function", "doc": "<p>Confirm class is validly constructed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.models.source.table.LiveTable.from_table": {"fullname": "datachef.models.source.table.LiveTable.from_table", "modulename": "datachef.models.source.table", "qualname": "LiveTable.from_table", "kind": "function", "doc": "<p>Given a table and optional it's name, create a livetable.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">LiveTable</span>:</span></span>", "funcdef": "def"}, "datachef.models.source.table.LiveTable.signature": {"fullname": "datachef.models.source.table.LiveTable.signature", "modulename": "datachef.models.source.table", "qualname": "LiveTable.signature", "kind": "variable", "doc": "<p>A uuid that uniquely identifies a parsed input source table</p>\n", "annotation": ": str"}, "datachef.notebook": {"fullname": "datachef.notebook", "modulename": "datachef.notebook", "kind": "module", "doc": "<p></p>\n"}, "datachef.notebook.ipython": {"fullname": "datachef.notebook.ipython", "modulename": "datachef.notebook.ipython", "kind": "module", "doc": "<p></p>\n"}, "datachef.notebook.ipython.in_notebook": {"fullname": "datachef.notebook.ipython.in_notebook", "modulename": "datachef.notebook.ipython", "qualname": "in_notebook", "kind": "function", "doc": "<p>Checks whether the python interpreter calling\nthis code is doing so via an IPython or Jupyter\nnotebook.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.notebook.preview": {"fullname": "datachef.notebook.preview", "modulename": "datachef.notebook.preview", "kind": "module", "doc": "<p></p>\n"}, "datachef.notebook.preview.boundary": {"fullname": "datachef.notebook.preview.boundary", "modulename": "datachef.notebook.preview.boundary", "kind": "module", "doc": "<p></p>\n"}, "datachef.notebook.preview.boundary.Boundary": {"fullname": "datachef.notebook.preview.boundary.Boundary", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary", "kind": "class", "doc": "<p>Class to calculate and help manage the boundary of\nthe cells we wish to display in this preview.</p>\n"}, "datachef.notebook.preview.boundary.Boundary.__init__": {"fullname": "datachef.notebook.preview.boundary.Boundary.__init__", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">selections</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bounded</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "datachef.notebook.preview.boundary.Boundary.bounded": {"fullname": "datachef.notebook.preview.boundary.Boundary.bounded", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.bounded", "kind": "variable", "doc": "<p></p>\n"}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"fullname": "datachef.notebook.preview.boundary.Boundary.highest_point", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.highest_point", "kind": "variable", "doc": "<p>The highest point of the table that we wish to preview, as you look at it</p>\n"}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"fullname": "datachef.notebook.preview.boundary.Boundary.lowest_point", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.lowest_point", "kind": "variable", "doc": "<p>The lowest point of the table that we wish to preview, as you look at it</p>\n"}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"fullname": "datachef.notebook.preview.boundary.Boundary.leftmost_point", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.leftmost_point", "kind": "variable", "doc": "<p>The leftmost point of the table that we wish to preview, as you look at it</p>\n"}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"fullname": "datachef.notebook.preview.boundary.Boundary.rightmost_point", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.rightmost_point", "kind": "variable", "doc": "<p>The rightmost point of the table that we wish to preview, as you look at it</p>\n"}, "datachef.notebook.preview.boundary.Boundary.contains": {"fullname": "datachef.notebook.preview.boundary.Boundary.contains", "modulename": "datachef.notebook.preview.boundary", "qualname": "Boundary.contains", "kind": "function", "doc": "<p>Is the provided cell within the defined boundary of what we\nwant to display as a preview.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.output": {"fullname": "datachef.output", "modulename": "datachef.output", "kind": "module", "doc": "<p></p>\n"}, "datachef.output.base": {"fullname": "datachef.output.base", "modulename": "datachef.output.base", "kind": "module", "doc": "<p></p>\n"}, "datachef.output.base.BaseOutput": {"fullname": "datachef.output.base.BaseOutput", "modulename": "datachef.output.base", "qualname": "BaseOutput", "kind": "class", "doc": "<p>A class to hold tidy data representations of a data source.</p>\n"}, "datachef.output.tidydata": {"fullname": "datachef.output.tidydata", "modulename": "datachef.output.tidydata", "kind": "module", "doc": "<p></p>\n"}, "datachef.output.tidydata.TidyData": {"fullname": "datachef.output.tidydata.TidyData", "modulename": "datachef.output.tidydata", "qualname": "TidyData", "kind": "class", "doc": "<p>A class to hold tidy data representations of a data source.</p>\n", "bases": "datachef.output.base.BaseOutput"}, "datachef.output.tidydata.TidyData.__init__": {"fullname": "datachef.output.tidydata.TidyData.__init__", "modulename": "datachef.output.tidydata", "qualname": "TidyData.__init__", "kind": "function", "doc": "<p>A class to generate a basic representation of the\ndata as tidy data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>observations</strong>:  The cell selection representing observations.</li>\n<li><strong>*columns</strong>:  1-n Columns to resolve against the observations.</li>\n<li><strong>obs_apply</strong>:  Callable to make changes to values in the observation column.</li>\n<li><strong>drop</strong>:  Columns by label to drop after cells have been resolved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Selectable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">columns</span>,</span><span class=\"param\">\t<span class=\"n\">obs_apply</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "datachef.output.tidydata.TidyData.observations": {"fullname": "datachef.output.tidydata.TidyData.observations", "modulename": "datachef.output.tidydata", "qualname": "TidyData.observations", "kind": "variable", "doc": "<p></p>\n"}, "datachef.output.tidydata.TidyData.columns": {"fullname": "datachef.output.tidydata.TidyData.columns", "modulename": "datachef.output.tidydata", "qualname": "TidyData.columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[datachef.column.base.BaseColumn]"}, "datachef.output.tidydata.TidyData.drop": {"fullname": "datachef.output.tidydata.TidyData.drop", "modulename": "datachef.output.tidydata", "qualname": "TidyData.drop", "kind": "variable", "doc": "<p></p>\n"}, "datachef.output.tidydata.TidyData.obs_apply": {"fullname": "datachef.output.tidydata.TidyData.obs_apply", "modulename": "datachef.output.tidydata", "qualname": "TidyData.obs_apply", "kind": "variable", "doc": "<p></p>\n"}, "datachef.output.tidydata.TidyData.to_dict": {"fullname": "datachef.output.tidydata.TidyData.to_dict", "modulename": "datachef.output.tidydata", "qualname": "TidyData.to_dict", "kind": "function", "doc": "<p>Outputs the TidyData as a pandas style dictionary, i.e</p>\n\n<p>{\n    column1: [column1value1, column1value2, column1value3],\n    column2: [column2value1, column2value2, column2value3],\n    etc\n}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.output.tidydata.TidyData.from_tidy": {"fullname": "datachef.output.tidydata.TidyData.from_tidy", "modulename": "datachef.output.tidydata", "qualname": "TidyData.from_tidy", "kind": "function", "doc": "<p>Creates a class:TidyData object from multiple class:TidyData objects\nprovided in the form:</p>\n\n<p>TidyData.from_tidy(tidydata1, tidydata2, tidydata3)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">tidy_data_objects</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">tidydata</span><span class=\"o\">.</span><span class=\"n\">TidyData</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">tidydata</span><span class=\"o\">.</span><span class=\"n\">TidyData</span>:</span></span>", "funcdef": "def"}, "datachef.output.tidydata.TidyData.from_tidy_list": {"fullname": "datachef.output.tidydata.TidyData.from_tidy_list", "modulename": "datachef.output.tidydata", "qualname": "TidyData.from_tidy_list", "kind": "function", "doc": "<p>Creates a class:TidyData object from a list of class:TidyData objects\nprovided in the form:</p>\n\n<p>TidyData.from_tidy_list([tidydata1, tidydata2, tidydata3])</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tidy_data_objects</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">tidydata</span><span class=\"o\">.</span><span class=\"n\">TidyData</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">tidydata</span><span class=\"o\">.</span><span class=\"n\">TidyData</span>:</span></span>", "funcdef": "def"}, "datachef.output.tidydata.TidyData.to_csv": {"fullname": "datachef.output.tidydata.TidyData.to_csv", "modulename": "datachef.output.tidydata", "qualname": "TidyData.to_csv", "kind": "function", "doc": "<p>Output the TidyData to a csv file.</p>\n\n<p>This method wraps the standard csv python library,\nthe **kwargs provided here are passed\nthrough to the csv.csvwriter() constructor.\n<a href=\"https://docs.python.org/3/library/csv.html\">https://docs.python.org/3/library/csv.html</a></p>\n\n<p>Returns a Path object representing the file that\nhas been written to, principally for testing.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">write_headers</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">write_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection": {"fullname": "datachef.selection", "modulename": "datachef.selection", "kind": "module", "doc": "<p></p>\n"}, "datachef.selection.datafuncs": {"fullname": "datachef.selection.datafuncs", "modulename": "datachef.selection.datafuncs", "kind": "module", "doc": "<h1 id=\"datafunctions\">Datafunctions</h1>\n\n<p>Datafunctions are stand alone functions that operate on basic cell (typically <code>BaseCell</code>) or primitve python variables.</p>\n\n<p>These functions power the methods in use by the variations of the <code>Selectable</code> class.</p>\n\n<p>This is a design choice to keep the api user friendly but also allow for more advanced users to dip into the data dunctions directly to deal with unexpected and/or advanced use cases.</p>\n\n<p>All submodules are imported with <code>datafuncs</code>, the separation is for convenience and categorisation while developing. </p>\n"}, "datachef.selection.datafuncs.common": {"fullname": "datachef.selection.datafuncs.common", "modulename": "datachef.selection.datafuncs.common", "kind": "module", "doc": "<p>Common data functions that do not fall into any of the other categories.</p>\n"}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"fullname": "datachef.selection.datafuncs.common.assert_quadrilaterals", "modulename": "datachef.selection.datafuncs.common", "qualname": "assert_quadrilaterals", "kind": "function", "doc": "<p>Assert that the provided list of cells equates to selection of cells\nthat form a quadrilateral shape with no gaps.</p>\n\n<p>This is a requirement when attempting to create an excel reference\nrepresenting a list of cells.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple of ints, min_x, max_x, min_y, max_y.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.cell_is_within": {"fullname": "datachef.selection.datafuncs.common.cell_is_within", "modulename": "datachef.selection.datafuncs.common", "qualname": "cell_is_within", "kind": "function", "doc": "<p>Is the cell present within the list of cells</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n<li><strong>cell</strong>:  A BaseCell or inheritor of that represents a single selected cell.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool, is the cell in the cells list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.cell_is_not_within": {"fullname": "datachef.selection.datafuncs.common.cell_is_not_within", "modulename": "datachef.selection.datafuncs.common", "qualname": "cell_is_not_within", "kind": "function", "doc": "<p>Is the cell absent from the list of cells</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n<li><strong>cell</strong>:  A BaseCell or inheritor of that represents a single selected cell.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool, is the cell absent from the cells list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.cells_not_in": {"fullname": "datachef.selection.datafuncs.common.cells_not_in", "modulename": "datachef.selection.datafuncs.common", "qualname": "cells_not_in", "kind": "function", "doc": "<p>Given two lists of cells. Return a List[BaseCell] representing\ninitial_cells minus any cells from unwanted_cells</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>initial_cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n<li><strong>unwanted_cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The cells from initial cells minus any that were in unwanted_cells</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">initial_cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">unwanted_cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.cells_on_x_index": {"fullname": "datachef.selection.datafuncs.common.cells_on_x_index", "modulename": "datachef.selection.datafuncs.common", "qualname": "cells_on_x_index", "kind": "function", "doc": "<p>Return a list from the provided cells that are on the specific x index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.\n:xi: A horizontal index, the column number of a tabulated data source</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.cells_on_y_index": {"fullname": "datachef.selection.datafuncs.common.cells_on_y_index", "modulename": "datachef.selection.datafuncs.common", "qualname": "cells_on_y_index", "kind": "function", "doc": "<p>Return a list from the provided cells that are on the specific y index</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n<li><strong>yi</strong>:  A horizontal index, the column number of a tabulated data source</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">y_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"fullname": "datachef.selection.datafuncs.common.exactly_matched_xy_cells", "modulename": "datachef.selection.datafuncs.common", "qualname": "exactly_matched_xy_cells", "kind": "function", "doc": "<p>Given a list of cells, return any that match xy values\nwith those in in wanted_cells.</p>\n\n<p>Raises an exception if we're asking for wanted_cells\nthat do not exist.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">wanted_cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"fullname": "datachef.selection.datafuncs.common.exactly_matching_xy_cell", "modulename": "datachef.selection.datafuncs.common", "qualname": "exactly_matching_xy_cell", "kind": "function", "doc": "<p>Given a wanted cell, the cell from cells that matches xy values\nwith it</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single BaseCell or inheritor of.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">wanted_cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"fullname": "datachef.selection.datafuncs.common.get_outlier_indicies", "modulename": "datachef.selection.datafuncs.common", "qualname": "get_outlier_indicies", "kind": "function", "doc": "<p>Given a list of cells, returns maximum and minimum x and y\nvalues from cells within that selection.</p>\n\n<p>returns:</p>\n\n<ul>\n<li>min_x</li>\n<li>max_x</li>\n<li>min_y</li>\n<li>max_y</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple of ints, min_x, max_x, min_y, max_y.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.matching_xy_cells": {"fullname": "datachef.selection.datafuncs.common.matching_xy_cells", "modulename": "datachef.selection.datafuncs.common", "qualname": "matching_xy_cells", "kind": "function", "doc": "<p>Given a list of cells, return all that match xy values\nwith those in wanted_cells.</p>\n\n<p>Note: does NOT raise an exception if we're asking for wanted_cells\nthat do not exist.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">wanted_cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.maximum_x_offset": {"fullname": "datachef.selection.datafuncs.common.maximum_x_offset", "modulename": "datachef.selection.datafuncs.common", "qualname": "maximum_x_offset", "kind": "function", "doc": "<p>Given a list of BaseCell's, return the largest x position in use</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The maximum horizontal index in use</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.maximum_y_offset": {"fullname": "datachef.selection.datafuncs.common.maximum_y_offset", "modulename": "datachef.selection.datafuncs.common", "qualname": "maximum_y_offset", "kind": "function", "doc": "<p>Given a list of BaseCell's, return the largest y position in use</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The maximum vertical index in use.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.minimum_x_offset": {"fullname": "datachef.selection.datafuncs.common.minimum_x_offset", "modulename": "datachef.selection.datafuncs.common", "qualname": "minimum_x_offset", "kind": "function", "doc": "<p>Given a list of BaseCell's, return the smallest x position in use</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The minimum horizontal index in use.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.minimum_y_offset": {"fullname": "datachef.selection.datafuncs.common.minimum_y_offset", "modulename": "datachef.selection.datafuncs.common", "qualname": "minimum_y_offset", "kind": "function", "doc": "<p>Given a list of BaseCell's, return the smallest y position in use</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The maximum vertical index in use.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"fullname": "datachef.selection.datafuncs.common.specific_cell_from_xy", "modulename": "datachef.selection.datafuncs.common", "qualname": "specific_cell_from_xy", "kind": "function", "doc": "<p>Given a list of cells and specific x and y co-ordinates,\nreturn the requested cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single BaseCell or inheritor of.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"fullname": "datachef.selection.datafuncs.common.all_used_x_indicies", "modulename": "datachef.selection.datafuncs.common", "qualname": "all_used_x_indicies", "kind": "function", "doc": "<p>Given a list of cells, return each unique x indicies\nfor a \"row\" that contains at least one cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of every horizontal index (x attribute) present in cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"fullname": "datachef.selection.datafuncs.common.all_used_y_indicies", "modulename": "datachef.selection.datafuncs.common", "qualname": "all_used_y_indicies", "kind": "function", "doc": "<p>Given a list of cells, return each unique y indicies\nfor a \"column\" that contains at least one cell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of every vertical index (y attribute) present in cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel": {"fullname": "datachef.selection.datafuncs.excel", "modulename": "datachef.selection.datafuncs.excel", "kind": "module", "doc": "<p>Data functions related to excel referencing of x.y positioned cells.</p>\n"}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"fullname": "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells", "modulename": "datachef.selection.datafuncs.excel", "qualname": "assert_excel_ref_within_cells", "kind": "function", "doc": "<p>Given a list of cells, assert that the cell denoted by\nthe provided excel reference, exists within the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n<li><strong>excel_ref</strong>:  A single excel reference for a single cell.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"fullname": "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells", "modulename": "datachef.selection.datafuncs.excel", "qualname": "any_excel_ref_as_wanted_basecells", "kind": "function", "doc": "<p>Convert an excel reference of either the single or multiple cell\nformat into a list of BaseCell objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>excel_ref</strong>:  A excel style reference to one or more cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"fullname": "datachef.selection.datafuncs.excel.single_excel_row_to_y_index", "modulename": "datachef.selection.datafuncs.excel", "qualname": "single_excel_row_to_y_index", "kind": "function", "doc": "<p>Given a single row number as an excel reference, return\nthe y offset value</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>excel_ref</strong>:  A number representing an excel style\nreference to a single row in a tabulated data source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>y (vertical offset) value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"fullname": "datachef.selection.datafuncs.excel.single_excel_column_to_x_index", "modulename": "datachef.selection.datafuncs.excel", "qualname": "single_excel_column_to_x_index", "kind": "function", "doc": "<p>Given a single column latter as an excel reference, return\nthe x index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>excel_ref</strong>:  One or more letters representing an excel\nstyle reference to a single column in a tabulated source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x (horizontal offset) value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"fullname": "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell", "modulename": "datachef.selection.datafuncs.excel", "qualname": "single_excel_ref_to_basecell", "kind": "function", "doc": "<p>Given a single excel cell reference, return a single BaseCell\nor inheritor of.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>excel_ref</strong>:  A excel style reference to a single cell.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A BaseCell or inheritor of.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"fullname": "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells", "modulename": "datachef.selection.datafuncs.excel", "qualname": "multi_excel_ref_to_basecells", "kind": "function", "doc": "<p>Given an excel reference referring to multiple cells, return a list of\nwanted BaseCells.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>excel_ref</strong>:  A excel style reference to a single cell.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"fullname": "datachef.selection.datafuncs.excel.basecell_to_excel_ref", "modulename": "datachef.selection.datafuncs.excel", "qualname": "basecell_to_excel_ref", "kind": "function", "doc": "<p>Given a single BaseCell object, return the representative excel reference.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>A single BaseCell or inheritor of</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A excel style reference to a single cell.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"fullname": "datachef.selection.datafuncs.excel.basecells_to_excel_ref", "modulename": "datachef.selection.datafuncs.excel", "qualname": "basecells_to_excel_ref", "kind": "function", "doc": "<p>Given a list of cells representing a solid selection with\nno gaps. Return the representative excel reference.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A excel style reference to multiple cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering": {"fullname": "datachef.selection.datafuncs.ordering", "modulename": "datachef.selection.datafuncs.ordering", "kind": "module", "doc": "<p>Helpers to order a list of cells to represent different ways you\ncould read a tablulated display of data in a cell by cell fashion.</p>\n"}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_leftright_topbottom", "kind": "function", "doc": "<p>Given a list of BaseCell's sort them into a typical human readable order.</p>\n\n<p>Example cell read order:\n|  1  |  2  |  3  |\n|  4  |  5  |  6  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_rightleft_bottomtop", "kind": "function", "doc": "<p>Given a list of BaseCell's sort them into a reverse human readable order.</p>\n\n<p>Example cell read order:\n|  6  |  5  |  4  |\n|  3  |  2  |  1  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_topbottom_leftright", "kind": "function", "doc": "<p>Order cells moving top to bottom from the leftmost column to the\nrightmost column.</p>\n\n<p>Example cell read order:\n|  1  |  3  |  5  |\n|  2  |  4  |  6  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_bottomtop_rightleft", "kind": "function", "doc": "<p>Order cells moving bottom to top from the rightmost column to the\nleftmost column.</p>\n\n<p>Example cell read order:\n|  6  |  4  |  2  |\n|  5  |  3  |  1  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_rightleft_topbottom", "kind": "function", "doc": "<p>Order cells left to right moving from the bottom row to the\ntop row.</p>\n\n<p>Example cell read order:\n|  3  |  2  |  1  |\n|  6  |  5  |  4  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_topbottom_rightleft", "kind": "function", "doc": "<p>Order cells right to left moving from the lefthand to right columns\nconsidering cells top to bottom</p>\n\n<p>Example cell read order:\n|  5  |  3  |  1  |\n|  6  |  4  |  2  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_leftright_bottomtop", "kind": "function", "doc": "<p>Order cells left to right moving from the left to righthand columns\nconsidering cells bottom to top</p>\n\n<p>Example cell read order:\n|  2  |  4  |  6  |\n|  1  |  3  |  5  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"fullname": "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright", "modulename": "datachef.selection.datafuncs.ordering", "qualname": "order_cells_bottomtop_leftright", "kind": "function", "doc": "<p>Order cells from bottom row to top row moving from left to right</p>\n\n<p>Example cell read order:\n|  4  |  5  |  6  |\n|  1  |  2  |  3  |</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cells</strong>:  A list of BaseCell or inheritors of that represents a selection\nof cells.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of BaseCell or inheritors of that represents a selection\n  of cells.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cells</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">BaseCell</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "datachef.selection.filters": {"fullname": "datachef.selection.filters", "modulename": "datachef.selection.filters", "kind": "module", "doc": "<h1 id=\"filters\">Filters</h1>\n\n<p>Filters are stand alone callables that return a boolean value when given a parameter of a single cell. As an example <code>contains_string(\"foo\")</code> is a filter that that will return <code>True</code> if a cells value contains the text \"foo\", else it will return <code>False</code>.</p>\n\n<p>example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># select all cells in a table with a cell value containing &quot;foo&quot;</span>\n<span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">contains_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Filters are intended to be passed as parametes to the <code>Selection.filter()</code> method.</p>\n\n<p>Filters are largely interchangable so the submodules are just used as a convienient way to categorise them by purpose.</p>\n\n<h2 id=\"why-filters-and-not-methods\">Why filters and not methods?</h2>\n\n<p>So I could have offered up the <code>contains_string</code> example as <code>table.contains_string(\"foo\")</code> easily enough and I'll admit to being tempted, but there' a subtle design distinction here:</p>\n\n<p>The filters operate on the _contents_ of the cell(s), whereas the methods tend to operate on the properties of the cell (i.e their positioning on the x and y axis).</p>\n\n<p>I will admit that's not exhaustive nor is intended to be, for example I have exposed some of the very common content operations as methods for user convenience (eg: <code>is_blank()</code>) but on the whole it's a distinction I'd like to keep to.</p>\n\n<p>More importantly I'm envisioning filters as more a community resource, as their decoupled enough from the flow of the code that (assuming decent naming, documentation and some tests) new ones can be merged into datachef fairly casually without risk of overwhelming users with options they may very well never use.</p>\n\n<p><strong>Design Note:</strong></p>\n\n<p>For the purpose of keeping the API consistant and user friendly, we'll be aliasing the\nfilters that are classes to snake case during export, so <code>ContainsString</code> will to exposed as <code>contains_string</code>.</p>\n\n<p>I'm aware that the former is more pythonic, but this tool is aimed squarely at analysts as much or more so than programmers and consistentency between the class and function based filters is important to our primary \"make it as easy to use as possible\" goal.</p>\n"}, "datachef.selection.filters.common": {"fullname": "datachef.selection.filters.common", "modulename": "datachef.selection.filters.common", "kind": "module", "doc": "<p>Common filters.</p>\n"}, "datachef.selection.filters.common.ContainsString": {"fullname": "datachef.selection.filters.common.ContainsString", "modulename": "datachef.selection.filters.common", "qualname": "ContainsString", "kind": "class", "doc": "<p>A filter than when given a string, filtlers cells based on whether\nthat string appears in the cells value.</p>\n"}, "datachef.selection.filters.common.ContainsString.__init__": {"fullname": "datachef.selection.filters.common.ContainsString.__init__", "modulename": "datachef.selection.filters.common", "qualname": "ContainsString.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">substr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, "datachef.selection.filters.common.ContainsString.substr": {"fullname": "datachef.selection.filters.common.ContainsString.substr", "modulename": "datachef.selection.filters.common", "qualname": "ContainsString.substr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, "datachef.selection.filters.common.is_numeric": {"fullname": "datachef.selection.filters.common.is_numeric", "modulename": "datachef.selection.filters.common", "qualname": "is_numeric", "kind": "function", "doc": "<p>The value of the cell is numerical</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.filters.common.is_not_numeric": {"fullname": "datachef.selection.filters.common.is_not_numeric", "modulename": "datachef.selection.filters.common", "qualname": "is_not_numeric", "kind": "function", "doc": "<p>The value of the cell is not numerical</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">Cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable": {"fullname": "datachef.selection.selectable", "modulename": "datachef.selection.selectable", "kind": "module", "doc": "<p></p>\n"}, "datachef.selection.selectable.Selectable": {"fullname": "datachef.selection.selectable.Selectable", "modulename": "datachef.selection.selectable", "qualname": "Selectable", "kind": "class", "doc": "<p>Inherits from LiveTable to add cell selection methods that are generic to all tabulated inputs.</p>\n", "bases": "datachef.models.source.table.LiveTable"}, "datachef.selection.selectable.Selectable.assert_one": {"fullname": "datachef.selection.selectable.Selectable.assert_one", "modulename": "datachef.selection.selectable", "qualname": "Selectable.assert_one", "kind": "function", "doc": "<p>Assert that the current selection contains exactly one cell</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.lone_value": {"fullname": "datachef.selection.selectable.Selectable.lone_value", "modulename": "datachef.selection.selectable", "qualname": "Selectable.lone_value", "kind": "function", "doc": "<p>Confirms the selection contains exactly one cell, then returns\nthe value of that cell</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.is_blank": {"fullname": "datachef.selection.selectable.Selectable.is_blank", "modulename": "datachef.selection.selectable", "qualname": "Selectable.is_blank", "kind": "function", "doc": "<p>Filters the selection to those cells that are blank.\nBy default a cell with just whitespace in it is\nconsidered blank. You can change this behaviour\nwith the disregard_whitespace keyword.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disregard_whitespace</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.is_not_blank": {"fullname": "datachef.selection.selectable.Selectable.is_not_blank", "modulename": "datachef.selection.selectable", "qualname": "Selectable.is_not_blank", "kind": "function", "doc": "<p>Filters the selection to those cells that are not blank.</p>\n\n<p>By default a cell with just whitespace in it is\nconsidered blank. You can change this behaviour\nwith the disregard_whitespace keyword.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">disregard_whitespace</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.expand": {"fullname": "datachef.selection.selectable.Selectable.expand", "modulename": "datachef.selection.selectable", "qualname": "Selectable.expand", "kind": "function", "doc": "<p>Given a direction of UP, DOWN, LEFT, RIGHT\nExpands the current selection of cells in that direction.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Will also accept ABOVE and BELOW as direction, as they\nare aliases of UP and DOWN respectively.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.fill": {"fullname": "datachef.selection.selectable.Selectable.fill", "modulename": "datachef.selection.selectable", "qualname": "Selectable.fill", "kind": "function", "doc": "<p>Creates a new selection from the cells in that direction\nrelative to the current cell selection.</p>\n\n<p>:direction: One of: up, down, left, right</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.shift": {"fullname": "datachef.selection.selectable.Selectable.shift", "modulename": "datachef.selection.selectable", "qualname": "Selectable.shift", "kind": "function", "doc": "<p>Move the entire current selection relatively, examples:</p>\n\n<ul>\n<li>.shift(right)</li>\n<li>.shift(right(5))</li>\n<li>.shift(2, 6)</li>\n<li>.shift(-1, 4)</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>direction_or_x</strong>:  Either a direction of the raw x offset\nof a direction.</li>\n<li><strong>possibly_y</strong>:  Either none or the raw y offset of a direction</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">direction_or_x</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Direction</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">possibly_y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.excel_ref": {"fullname": "datachef.selection.selectable.Selectable.excel_ref", "modulename": "datachef.selection.selectable", "qualname": "Selectable.excel_ref", "kind": "function", "doc": "<p>Selects just the cells as indicated by the provided excel style\nreference: \"A6\", \"B17:B24\", \"9\", \"GH\" etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">excel_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.validate": {"fullname": "datachef.selection.selectable.Selectable.validate", "modulename": "datachef.selection.selectable", "qualname": "Selectable.validate", "kind": "function", "doc": "<p>Validates current cell selection by passing each currently\nselected cell to the provided validator.</p>\n\n<p>Pass raise_first_error=True if you just want the first\ninvalid value message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">validator</span><span class=\"p\">:</span> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">against</span><span class=\"o\">.</span><span class=\"n\">implementations</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseValidator</span>,</span><span class=\"param\">\t<span class=\"n\">raise_first_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.filter": {"fullname": "datachef.selection.selectable.Selectable.filter", "modulename": "datachef.selection.selectable", "qualname": "Selectable.filter", "kind": "function", "doc": "<p>Selects just the cells that match the provided check</p>\n\n<p>: param check: a function, lambda or callable class that\nreturns a bool when given a single cell as a parameter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.re": {"fullname": "datachef.selection.selectable.Selectable.re", "modulename": "datachef.selection.selectable", "qualname": "Selectable.re", "kind": "function", "doc": "<p>Filter the current selection of cells to only include\ncells whose value matches the provided regular expression\npattern.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"fullname": "datachef.selection.selectable.Selectable.finds_observations_directly", "modulename": "datachef.selection.selectable", "qualname": "Selectable.finds_observations_directly", "kind": "function", "doc": "<p>Creates and returns a class:Directly lookup engine\nthat can resolve the correct cell from this selection\nrelative to any given observation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">direct</span><span class=\"o\">.</span><span class=\"n\">Directly</span>:</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"fullname": "datachef.selection.selectable.Selectable.finds_observations_closest", "modulename": "datachef.selection.selectable", "qualname": "Selectable.finds_observations_closest", "kind": "function", "doc": "<p>Creates and returns a class:Closest lookup engine\nthat can resolve the correct cell from this selection\nrelative to any given observation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">closest</span><span class=\"o\">.</span><span class=\"n\">Closest</span>:</span></span>", "funcdef": "def"}, "datachef.selection.selectable.Selectable.finds_observations_within": {"fullname": "datachef.selection.selectable.Selectable.finds_observations_within", "modulename": "datachef.selection.selectable", "qualname": "Selectable.finds_observations_within", "kind": "function", "doc": "<p>Creates and returns a class:Within lookup engine\nthat can resolve the correct cell from this selection\nrelative to any given observation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Direction</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datachef</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">within</span><span class=\"o\">.</span><span class=\"n\">Within</span>:</span></span>", "funcdef": "def"}, "datachef.utils": {"fullname": "datachef.utils", "modulename": "datachef.utils", "kind": "module", "doc": "<p></p>\n"}, "datachef.utils.cellutils": {"fullname": "datachef.utils.cellutils", "modulename": "datachef.utils.cellutils", "kind": "module", "doc": "<p></p>\n"}, "datachef.utils.cellutils.excel": {"fullname": "datachef.utils.cellutils.excel", "modulename": "datachef.utils.cellutils.excel", "kind": "module", "doc": "<p></p>\n"}, "datachef.utils.cellutils.excel.letters_to_x": {"fullname": "datachef.utils.cellutils.excel.letters_to_x", "modulename": "datachef.utils.cellutils.excel", "qualname": "letters_to_x", "kind": "function", "doc": "<p>Given letters (as per excel column references), return the equivilent\nx co-ordinate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_letters_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "datachef.utils.cellutils.excel.x_to_letters": {"fullname": "datachef.utils.cellutils.excel.x_to_letters", "modulename": "datachef.utils.cellutils.excel", "qualname": "x_to_letters", "kind": "function", "doc": "<p>Convert an x co-ordinate to excel style letter references</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "datachef.utils.cellutils.excel.number_to_y": {"fullname": "datachef.utils.cellutils.excel.number_to_y", "modulename": "datachef.utils.cellutils.excel", "qualname": "number_to_y", "kind": "function", "doc": "<p>Given an excel row number, return the y offset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_number_ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.utils.cellutils.excel.y_to_number": {"fullname": "datachef.utils.cellutils.excel.y_to_number", "modulename": "datachef.utils.cellutils.excel", "qualname": "y_to_number", "kind": "function", "doc": "<p>Given a y offset, return the excel row number</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">excel_number_ref</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.utils.decorators": {"fullname": "datachef.utils.decorators", "modulename": "datachef.utils.decorators", "kind": "module", "doc": "<p>Decorators in common use throughout the codebase.</p>\n"}, "datachef.utils.decorators.dontmutate": {"fullname": "datachef.utils.decorators.dontmutate", "modulename": "datachef.utils.decorators.dontmutate", "kind": "module", "doc": "<p></p>\n"}, "datachef.utils.decorators.dontmutate.dontmutate": {"fullname": "datachef.utils.decorators.dontmutate.dontmutate", "modulename": "datachef.utils.decorators.dontmutate", "qualname": "dontmutate", "kind": "function", "doc": "<p>Decorates a method so that any changes\nare made to a _copy_ of self not self.</p>\n\n<p>Without this, the following patterns:</p>\n\n<p>selection2 = selection1.do_something()</p>\n\n<p>match2 = match.regex(\"foo\")</p>\n\n<p>Would change the value in the righthand\nclasses (selection1 and match) as well\nas their lefthand assignations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "datachef.utils.fileutils": {"fullname": "datachef.utils.fileutils", "modulename": "datachef.utils.fileutils", "kind": "module", "doc": "<p></p>\n"}, "datachef.utils.fileutils.paths": {"fullname": "datachef.utils.fileutils.paths", "modulename": "datachef.utils.fileutils.paths", "kind": "module", "doc": "<p></p>\n"}, "datachef.utils.fileutils.paths.ensure_existing_path": {"fullname": "datachef.utils.fileutils.paths.ensure_existing_path", "modulename": "datachef.utils.fileutils.paths", "qualname": "ensure_existing_path", "kind": "function", "doc": "<p>When given a Path or str representing an existing path, ensure that:</p>\n\n<p>a.) it is a Path (convert where necessary)\nb.) confirm it exists</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">maybe_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"datachef": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "datachef.acquire": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "datachef.acquire.base": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.acquire.base.BaseReader": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "datachef.acquire.base.BaseReader.parse": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 106, "bases": 0, "doc": 9}, "datachef.acquire.csv": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "datachef.acquire.csv.http_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.acquire.csv.http_implemented.http": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 162, "bases": 0, "doc": 138}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 112, "bases": 0, "doc": 102}, "datachef.acquire.csv.local_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.acquire.csv.local_implemented.local": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 133, "bases": 0, "doc": 150}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 84}, "datachef.acquire.main": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 69}, "datachef.acquire.main.acquirer": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 176, "bases": 0, "doc": 127}, "datachef.acquire.python": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "datachef.acquire.python.listoflists_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 120, "bases": 0, "doc": 167}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 9}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 85}, "datachef.acquire.xls": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "datachef.acquire.xls.http_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.acquire.xls.http_implemented.http": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 185, "bases": 0, "doc": 169}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 118, "bases": 0, "doc": 114}, "datachef.acquire.xls.local_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.acquire.xls.local_implemented.local": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 139, "bases": 0, "doc": 147}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 85}, "datachef.acquire.xlsx": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "datachef.acquire.xlsx.http_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.acquire.xlsx.http_implemented.http": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 185, "bases": 0, "doc": 171}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 130, "bases": 0, "doc": 124}, "datachef.acquire.xlsx.local_implemented": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.acquire.xlsx.local_implemented.local": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 139, "bases": 0, "doc": 149}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 108, "bases": 0, "doc": 105}, "datachef.against": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations.base": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations.base.BaseValidator": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "datachef.against.implementations.base.BaseValidator.msg": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 16}, "datachef.against.implementations.items": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations.items.ItemsValidator": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 22}, "datachef.against.implementations.items.ItemsValidator.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "datachef.against.implementations.items.ItemsValidator.items": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations.items.ItemsValidator.msg": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 49}, "datachef.against.implementations.regex": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations.regex.RegexValidator": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 3}, "datachef.against.implementations.regex.RegexValidator.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "datachef.against.implementations.regex.RegexValidator.pattern": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.against.implementations.regex.RegexValidator.msg": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 51}, "datachef.against.wrapper": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "datachef.against.wrapper.regex": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 49}, "datachef.against.wrapper.items": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 55}, "datachef.column": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.column.base": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.column.base.BaseColumn": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 22}, "datachef.column.base.BaseColumn.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 50}, "datachef.column.base.BaseColumn.engine": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.column.base.BaseColumn.label": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 82}, "datachef.column.base.BaseColumn.lookup_preview": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 110, "bases": 0, "doc": 60}, "datachef.column.column": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.column.column.Column": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 69}, "datachef.column.column.Column.horizontal_condition": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 91}, "datachef.column.column.Column.constant": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 72}, "datachef.direction": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.BaseDirection": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.Direction": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 77}, "datachef.direction.directions.up": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.above": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.down": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.below": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.right": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "datachef.direction.directions.left": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.BadExcelReferenceError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 22}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.BadShiftParameterError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 14}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 28}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 65}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.OutputPassedToPreview": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.ReversedExcelRefError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 20}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.UnknownDirectionError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 14}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.cells": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 37}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.cells.InvlaidCellPositionError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 37}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.FileInputError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 16}, "datachef.exceptions.common.FileInputError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "datachef.exceptions.common.FileInputError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.CellsDoNotExistError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 21}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 23}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.InvalidCellObjectError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 20}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.UnalignedTableOperation": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 42}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.InvalidTableSignatures": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 15}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.OutOfBoundsError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 54}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.OutOfBoundsError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.ImpossibleLookupError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 39}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.MissingLabelError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 26}, "datachef.exceptions.common.MissingLabelError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.MissingLabelError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.BadConditionalResolverError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 22}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 25}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 22}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.MisalignedHeadersError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 25}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.CellValidationError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 17}, "datachef.exceptions.common.CellValidationError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.CellValidationError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.common.DroppingNonColumnError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 25}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.lookups": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.lookups.AmbiguousLookupError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 26}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.lookups.MissingDirectLookupError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 21}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.exceptions.lookups.FailedLookupError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 13}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "datachef.exceptions.lookups.FailedLookupError.msg": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.base": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.base.BaseLookupEngine": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.lookup.base.BaseLookupEngine.resolve": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 22}, "datachef.lookup.engines": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.HIGHEST": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.LOWEST": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 58}, "datachef.lookup.engines.closest.CellRange.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange.low": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange.high": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange.cell": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange.direction": {"qualname": 2, "fullname": 6, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange.axis_text": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRange.contains": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 33}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 45}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 45}, "datachef.lookup.engines.closest.CellRanges": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "datachef.lookup.engines.closest.CellRanges.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 22}, "datachef.lookup.engines.closest.CellRanges.direction": {"qualname": 2, "fullname": 6, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"qualname": 4, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"qualname": 4, "fullname": 8, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRanges.table": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"qualname": 3, "fullname": 7, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 27}, "datachef.lookup.engines.closest.Closest": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 12}, "datachef.lookup.engines.closest.Closest.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 66}, "datachef.lookup.engines.closest.Closest.table": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.Closest.direction": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.Closest.ranges": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.Closest.bumped": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.Closest.start_index": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.Closest.label": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.closest.Closest.resolve": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 132}, "datachef.lookup.engines.constant": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.constant.Constant": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 19}, "datachef.lookup.engines.constant.Constant.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 58}, "datachef.lookup.engines.constant.Constant.cell": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.constant.Constant.label": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.constant.Constant.resolve": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 39}, "datachef.lookup.engines.direct": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.direct.Directly": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 58}, "datachef.lookup.engines.direct.Directly.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 79}, "datachef.lookup.engines.direct.Directly.table": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.direct.Directly.label": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.direct.Directly.direction": {"qualname": 2, "fullname": 6, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.direct.Directly.resolve": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 63}, "datachef.lookup.engines.horizontal_condition": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 25}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 83}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 84}, "datachef.lookup.engines.within": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 12}, "datachef.lookup.engines.within.Within.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 135, "bases": 0, "doc": 377}, "datachef.lookup.engines.within.Within.label": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.table": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.start": {"qualname": 2, "fullname": 6, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.end": {"qualname": 2, "fullname": 6, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.direction_of_travel": {"qualname": 4, "fullname": 8, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.direction": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.cells": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.lookup.engines.within.Within.resolve": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 57}, "datachef.models": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "datachef.models.source.cell.BaseCell": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "datachef.models.source.cell.BaseCell.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "datachef.models.source.cell.BaseCell.x": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.BaseCell.y": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.BaseCell.matches_xy": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 62}, "datachef.models.source.cell.BaseCell.is_above": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 73}, "datachef.models.source.cell.BaseCell.is_below": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 73}, "datachef.models.source.cell.BaseCell.is_right_of": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 52}, "datachef.models.source.cell.BaseCell.is_left_of": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 52}, "datachef.models.source.cell.VirtualCell": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 51}, "datachef.models.source.cell.VirtualCell.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 3}, "datachef.models.source.cell.VirtualCell.value": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.VirtualCell.x": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.VirtualCell.y": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.Cell": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 12}, "datachef.models.source.cell.Cell.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 120, "bases": 0, "doc": 3}, "datachef.models.source.cell.Cell.value": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.Cell.x": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.Cell.y": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.Cell.cellformat": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cell.Cell.is_blank": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 39}, "datachef.models.source.cell.Cell.is_not_blank": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 40}, "datachef.models.source.cellformat": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.cellformat.CellFormatting": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.table": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "datachef.models.source.table.Table": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "datachef.models.source.table.Table.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 3}, "datachef.models.source.table.Table.cells": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.table.Table.add_cell": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 3}, "datachef.models.source.table.LiveTable": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 101}, "datachef.models.source.table.LiveTable.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 103, "bases": 0, "doc": 3}, "datachef.models.source.table.LiveTable.pristine": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.table.LiveTable.filtered": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.table.LiveTable.source": {"qualname": 2, "fullname": 6, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.models.source.table.LiveTable.label": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.models.source.table.LiveTable.label_as": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 9}, "datachef.models.source.table.LiveTable.name": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.models.source.table.LiveTable.cells": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.models.source.table.LiveTable.pcells": {"qualname": 2, "fullname": 6, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.models.source.table.LiveTable.selections_made": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "datachef.models.source.table.LiveTable.confirm_valid": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "datachef.models.source.table.LiveTable.from_table": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 125, "bases": 0, "doc": 14}, "datachef.models.source.table.LiveTable.signature": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "datachef.notebook": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.notebook.ipython": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.notebook.ipython.in_notebook": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 20}, "datachef.notebook.preview": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.notebook.preview.boundary": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.notebook.preview.boundary.Boundary": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 21}, "datachef.notebook.preview.boundary.Boundary.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 3}, "datachef.notebook.preview.boundary.Boundary.bounded": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "datachef.notebook.preview.boundary.Boundary.contains": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 20}, "datachef.output": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.base": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.base.BaseOutput": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "datachef.output.tidydata": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.tidydata.TidyData": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 14}, "datachef.output.tidydata.TidyData.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 81}, "datachef.output.tidydata.TidyData.observations": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.tidydata.TidyData.columns": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.tidydata.TidyData.drop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.tidydata.TidyData.obs_apply": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.output.tidydata.TidyData.to_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 25}, "datachef.output.tidydata.TidyData.from_tidy": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 23}, "datachef.output.tidydata.TidyData.from_tidy_list": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 26}, "datachef.output.tidydata.TidyData.to_csv": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 56}, "datachef.selection": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.selection.datafuncs": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 99}, "datachef.selection.datafuncs.common": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 90}, "datachef.selection.datafuncs.common.cell_is_within": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 72}, "datachef.selection.datafuncs.common.cell_is_not_within": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 73}, "datachef.selection.datafuncs.common.cells_not_in": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 111, "bases": 0, "doc": 87}, "datachef.selection.datafuncs.common.cells_on_x_index": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 77}, "datachef.selection.datafuncs.common.cells_on_y_index": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 81}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 110, "bases": 0, "doc": 86}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 58}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 92}, "datachef.selection.datafuncs.common.matching_xy_cells": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 110, "bases": 0, "doc": 88}, "datachef.selection.datafuncs.common.maximum_x_offset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 56}, "datachef.selection.datafuncs.common.maximum_y_offset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 57}, "datachef.selection.datafuncs.common.minimum_x_offset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 57}, "datachef.selection.datafuncs.common.minimum_y_offset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 57}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 61}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 69}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 69}, "datachef.selection.datafuncs.excel": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 63}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 67}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 60}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 61}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 53}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 62}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 46}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 60}, "datachef.selection.datafuncs.ordering": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 28}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 86}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 88}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 88}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 84}, "datachef.selection.filters": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 446}, "datachef.selection.filters.common": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "datachef.selection.filters.common.ContainsString": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 22}, "datachef.selection.filters.common.ContainsString.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "datachef.selection.filters.common.ContainsString.substr": {"qualname": 2, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.selection.filters.common.is_numeric": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 9}, "datachef.selection.filters.common.is_not_numeric": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 10}, "datachef.selection.selectable": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.selection.selectable.Selectable": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 18}, "datachef.selection.selectable.Selectable.assert_one": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "datachef.selection.selectable.Selectable.lone_value": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 16}, "datachef.selection.selectable.Selectable.is_blank": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 34}, "datachef.selection.selectable.Selectable.is_not_blank": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 38}, "datachef.selection.selectable.Selectable.expand": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 47}, "datachef.selection.selectable.Selectable.fill": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 28}, "datachef.selection.selectable.Selectable.shift": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 82}, "datachef.selection.selectable.Selectable.excel_ref": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 20}, "datachef.selection.selectable.Selectable.validate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 34}, "datachef.selection.selectable.Selectable.filter": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 35}, "datachef.selection.selectable.Selectable.re": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 21}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 24}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 24}, "datachef.selection.selectable.Selectable.finds_observations_within": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 101, "bases": 0, "doc": 24}, "datachef.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.utils.cellutils": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.utils.cellutils.excel": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.utils.cellutils.excel.letters_to_x": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 15}, "datachef.utils.cellutils.excel.x_to_letters": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 12}, "datachef.utils.cellutils.excel.number_to_y": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 11}, "datachef.utils.cellutils.excel.y_to_number": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 11}, "datachef.utils.decorators": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "datachef.utils.decorators.dontmutate": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.utils.decorators.dontmutate.dontmutate": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 60}, "datachef.utils.fileutils": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.utils.fileutils.paths": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "datachef.utils.fileutils.paths.ensure_existing_path": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 28}}, "length": 379, "save": true}, "index": {"qualname": {"root": {"docs": {"datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}}, "df": 45, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.base.BaseReader.parse": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.engine": {"tf": 1}, "datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}}, "df": 11, "s": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.BaseDirection": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.base.BaseOutput": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.direction.directions.below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.bumped": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 4}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 8}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.pristine": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 7, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"datachef.lookup.engines.closest.CellRange.high": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.HIGHEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}}, "df": 3}}, "r": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}, "w": {"docs": {"datachef.lookup.engines.closest.CellRange.low": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.LOWEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}}, "df": 3}}, "r": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 14}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.within.Within.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.left": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.Table.add_cell": {"tf": 1}}, "df": 1}}, "s": {"docs": {"datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 6}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.output.tidydata.TidyData.observations": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 4}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}}, "df": 2, "e": {"docs": {"datachef.selection.selectable.Selectable.assert_one": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 8}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "g": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}}, "df": 30}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}}, "df": 1}, "d": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.selections_made": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "n": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {"datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}}, "df": 45}}, "v": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 12}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 7, "r": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "f": {"docs": {"datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.right": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 3, "s": {"docs": {"datachef.lookup.engines.closest.Closest.ranges": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.engine": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"datachef.lookup.engines.within.Within.end": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 9}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 5, "s": {"docs": {"datachef.output.tidydata.TidyData.columns": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}}, "df": 3}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 16, "s": {"docs": {"datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.models.source.table.Table.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 17, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 10, "s": {"docs": {"datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 8}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.cell.Cell.cellformat": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.cellformat.CellFormatting": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.ranges": {"tf": 1}, "datachef.lookup.engines.closest.Closest.bumped": {"tf": 1}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}}, "df": 10}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable.filtered": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.lookup.engines.within.Within.direction": {"tf": 1}}, "df": 7}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}}, "df": 7}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.down": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"datachef.output.tidydata.TidyData.drop": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.direction.directions.up": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.label": {"tf": 1}, "datachef.lookup.engines.within.Within.table": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.lookup.engines.within.Within.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 14, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {"datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.name": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.within.Within.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.cells": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}}, "df": 10}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.observations": {"tf": 1}, "datachef.output.tidydata.TidyData.columns": {"tf": 1}, "datachef.output.tidydata.TidyData.drop": {"tf": 1}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 10}}}}}}}, "o": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 12, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}}, "df": 4}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.source": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.table.LiveTable.selections_made": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 15}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters.common.ContainsString.substr": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 2}}}, "x": {"docs": {"datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 10, "y": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 5}}, "y": {"docs": {"datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 10}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}}, "df": 5}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "fullname": {"root": {"docs": {"datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}}, "df": 45, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef": {"tf": 1}, "datachef.acquire": {"tf": 1}, "datachef.acquire.base": {"tf": 1}, "datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against": {"tf": 1}, "datachef.against.implementations": {"tf": 1}, "datachef.against.implementations.base": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column": {"tf": 1}, "datachef.column.base": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.engine": {"tf": 1}, "datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.direction": {"tf": 1}, "datachef.direction.directions": {"tf": 1}, "datachef.direction.directions.BaseDirection": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}, "datachef.exceptions": {"tf": 1}, "datachef.exceptions.badparams": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}, "datachef.exceptions.cells": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}, "datachef.exceptions.common": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}, "datachef.exceptions.lookups": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}, "datachef.lookup": {"tf": 1}, "datachef.lookup.base": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines": {"tf": 1}, "datachef.lookup.engines.closest": {"tf": 1}, "datachef.lookup.engines.closest.HIGHEST": {"tf": 1}, "datachef.lookup.engines.closest.LOWEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.ranges": {"tf": 1}, "datachef.lookup.engines.closest.Closest.bumped": {"tf": 1}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.label": {"tf": 1}, "datachef.lookup.engines.within.Within.table": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.lookup.engines.within.Within.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models": {"tf": 1}, "datachef.models.source": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.cellformat": {"tf": 1}, "datachef.models.source.cellformat.CellFormatting": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.cells": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}, "datachef.notebook": {"tf": 1}, "datachef.notebook.ipython": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.notebook.preview": {"tf": 1}, "datachef.notebook.preview.boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output": {"tf": 1}, "datachef.output.base": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.observations": {"tf": 1}, "datachef.output.tidydata.TidyData.columns": {"tf": 1}, "datachef.output.tidydata.TidyData.drop": {"tf": 1}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils": {"tf": 1}, "datachef.utils.cellutils": {"tf": 1}, "datachef.utils.cellutils.excel": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}, "datachef.utils.decorators": {"tf": 1}, "datachef.utils.decorators.dontmutate": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}, "datachef.utils.fileutils": {"tf": 1}, "datachef.utils.fileutils.paths": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 379}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 37}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.direct": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction": {"tf": 1}, "datachef.direction.directions": {"tf": 1}, "datachef.direction.directions.BaseDirection": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.lookup.engines.within.Within.direction": {"tf": 1}}, "df": 16, "s": {"docs": {"datachef.direction.directions": {"tf": 1}, "datachef.direction.directions.BaseDirection": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 9}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}}, "df": 7}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.down": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.decorators.dontmutate": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"datachef.output.tidydata.TidyData.drop": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.decorators": {"tf": 1}, "datachef.utils.decorators.dontmutate": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 3}}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire": {"tf": 1}, "datachef.acquire.base": {"tf": 1}, "datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 38, "r": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.against": {"tf": 1}, "datachef.against.implementations": {"tf": 1}, "datachef.against.implementations.base": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 18}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.Table.add_cell": {"tf": 1}}, "df": 1}}, "s": {"docs": {"datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base": {"tf": 1}, "datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.against.implementations.base": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.column.base": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.engine": {"tf": 1}, "datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.lookup.base": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.output.base": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}}, "df": 18, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.base.BaseReader.parse": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.engine": {"tf": 1}, "datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}}, "df": 11, "s": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.BaseDirection": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.base.BaseOutput": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions.badparams": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}}, "df": 22}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.direction.directions.below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.bumped": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.notebook.preview.boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1.4142135623730951}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 4}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 8}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.utils.fileutils.paths": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.notebook.preview": {"tf": 1}, "datachef.notebook.preview.boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 11, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.pristine": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {"datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column": {"tf": 1}, "datachef.column.base": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.engine": {"tf": 1}, "datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column": {"tf": 1.4142135623730951}, "datachef.column.column.Column": {"tf": 1.7320508075688772}, "datachef.column.column.Column.horizontal_condition": {"tf": 1.7320508075688772}, "datachef.column.column.Column.constant": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 13, "s": {"docs": {"datachef.output.tidydata.TidyData.columns": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 9}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}, "datachef.lookup.engines.constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}}, "df": 3}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.common": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.filters.common": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 70}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.value": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.x": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.y": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 31, "s": {"docs": {"datachef.exceptions.cells": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.models.source.table.Table.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 24, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 10, "s": {"docs": {"datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 8}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.cellformat": {"tf": 1}, "datachef.models.source.cellformat.CellFormatting": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.cellformat.CellFormatting": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.cellutils": {"tf": 1}, "datachef.utils.cellutils.excel": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 6}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest": {"tf": 1}, "datachef.lookup.engines.closest.HIGHEST": {"tf": 1}, "datachef.lookup.engines.closest.LOWEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.ranges": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.bumped": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}}, "df": 31}}}}}}}, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 12, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 9, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 7, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"datachef.lookup.engines.closest.CellRange.high": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.HIGHEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}}, "df": 3}}, "r": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 28}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations": {"tf": 1}, "datachef.against.implementations.base": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 14}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1.4142135623730951}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 6, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "n": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {"datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}}, "df": 45}}, "v": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 12}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.notebook.ipython": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 12, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.lookup": {"tf": 1}, "datachef.lookup.base": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines": {"tf": 1}, "datachef.lookup.engines.closest": {"tf": 1}, "datachef.lookup.engines.closest.HIGHEST": {"tf": 1}, "datachef.lookup.engines.closest.LOWEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.ranges": {"tf": 1}, "datachef.lookup.engines.closest.Closest.bumped": {"tf": 1}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.label": {"tf": 1}, "datachef.lookup.engines.within.Within.table": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.lookup.engines.within.Within.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 68, "s": {"docs": {"datachef.exceptions.lookups": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}}, "df": 10}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}, "w": {"docs": {"datachef.lookup.engines.closest.CellRange.low": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.LOWEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}}, "df": 3}}, "r": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 14}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.base.BaseColumn.label": {"tf": 1}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.within.Within.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.left": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}}, "df": 1}, "d": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.selections_made": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "g": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}}, "df": 30}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models": {"tf": 1}, "datachef.models.source": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.cellformat": {"tf": 1}, "datachef.models.source.cellformat.CellFormatting": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.cells": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 46}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 6}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.output.tidydata.TidyData.observations": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 4}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output": {"tf": 1}, "datachef.output.base": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.observations": {"tf": 1}, "datachef.output.tidydata.TidyData.columns": {"tf": 1}, "datachef.output.tidydata.TidyData.drop": {"tf": 1}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 14, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}}, "df": 2, "e": {"docs": {"datachef.selection.selectable.Selectable.assert_one": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 9}}}}}}}}, "x": {"docs": {"datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 10, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}}, "df": 9, "x": {"docs": {"datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 9}}}, "y": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.against.implementations.regex": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}}, "df": 6, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 7, "r": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "f": {"docs": {"datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.right": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 3, "s": {"docs": {"datachef.lookup.engines.closest.Closest.ranges": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.wrapper": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.within": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.label": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.table": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.start": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.end": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.direction": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.cells": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 15, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.engine": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.lookup.engines": {"tf": 1}, "datachef.lookup.engines.closest": {"tf": 1}, "datachef.lookup.engines.closest.HIGHEST": {"tf": 1}, "datachef.lookup.engines.closest.LOWEST": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.ranges": {"tf": 1}, "datachef.lookup.engines.closest.Closest.bumped": {"tf": 1}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.label": {"tf": 1}, "datachef.lookup.engines.within.Within.table": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}, "datachef.lookup.engines.within.Within.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 63}}}}}, "d": {"docs": {"datachef.lookup.engines.within.Within.end": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions": {"tf": 1}, "datachef.exceptions.badparams": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}, "datachef.exceptions.cells": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1}, "datachef.exceptions.common": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1}, "datachef.exceptions.lookups": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}}, "df": 86}}}}}}, "l": {"docs": {"datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 15}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.fileutils": {"tf": 1}, "datachef.utils.fileutils.paths": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable.filtered": {"tf": 1}}, "df": 1}}, "s": {"docs": {"datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 7}}}}, "l": {"docs": {"datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.direction.directions.up": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils": {"tf": 1}, "datachef.utils.cellutils": {"tf": 1}, "datachef.utils.cellutils.excel": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}, "datachef.utils.decorators": {"tf": 1}, "datachef.utils.decorators.dontmutate": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}, "datachef.utils.fileutils": {"tf": 1}, "datachef.utils.fileutils.paths": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 13}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {"datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.notebook": {"tf": 1}, "datachef.notebook.ipython": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1.4142135623730951}, "datachef.notebook.preview": {"tf": 1}, "datachef.notebook.preview.boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 13}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.name": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.table": {"tf": 1}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1}, "datachef.lookup.engines.within.Within.table": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table.cells": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table.add_cell": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 24}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"datachef.output.tidydata": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.observations": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.columns": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.drop": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}}, "df": 11}}}}}}}, "o": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 12, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}}, "df": 4}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.start_index": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.cellformat": {"tf": 1}, "datachef.models.source.cellformat.CellFormatting": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.cells": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 45}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 61, "s": {"docs": {"datachef.models.source.table.LiveTable.selections_made": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.fill": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.validate": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.filter": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.re": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1.4142135623730951}}, "df": 16}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters.common.ContainsString.substr": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 10}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}}, "df": 5}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "annotation": {"root": {"0": {"docs": {}, "df": 0, "x": {"1": {"0": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "e": {"2": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"0": {"docs": {"datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 6}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.start": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.end": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}, "datachef.output.tidydata.TidyData.columns": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}}, "df": 33, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.items.ItemsValidator.items": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.output.tidydata.TidyData.columns": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1}, "datachef.models.source.table.LiveTable.source": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1}}, "df": 6}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 7}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.low": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1}, "datachef.models.source.cell.BaseCell.x": {"tf": 1}, "datachef.models.source.cell.BaseCell.y": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 6}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.cell": {"tf": 1}, "datachef.lookup.engines.within.Within.cells": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 7}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.lookup.engines.closest.CellRange.cell": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.cells": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.cells": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.cell.Cell.cellformat": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.cell.Cell.cellformat": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.output.tidydata.TidyData.columns": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 6}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 6}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1}, "datachef.lookup.engines.within.Within.start": {"tf": 1}, "datachef.lookup.engines.within.Within.end": {"tf": 1}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1}}, "df": 6}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef.models.source.cell.Cell.cellformat": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.pristine": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"datachef.models.source.table.LiveTable.source": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"datachef.models.source.table.LiveTable.source": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.output.tidydata.TidyData.columns": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.output.tidydata.TidyData.columns": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "default_value": {"root": {"0": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}, "datachef.lookup.engines.closest.LOWEST": {"tf": 1}}, "df": 7}, "1": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}, "9": {"9": {"9": {"9": {"9": {"9": {"9": {"9": {"9": {"9": {"9": {"9": {"9": {"docs": {"datachef.lookup.engines.closest.HIGHEST": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.down": {"tf": 1}}, "df": 1}}}}, "x": {"2": {"7": {"docs": {"datachef.direction.directions.up": {"tf": 1.4142135623730951}, "datachef.direction.directions.above": {"tf": 1.4142135623730951}, "datachef.direction.directions.down": {"tf": 1.4142135623730951}, "datachef.direction.directions.below": {"tf": 1.4142135623730951}, "datachef.direction.directions.right": {"tf": 1.4142135623730951}, "datachef.direction.directions.left": {"tf": 1.4142135623730951}}, "df": 6}, "docs": {}, "df": 0}, "docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}, "y": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.VirtualCell.value": {"tf": 1}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1}, "datachef.models.source.cell.Cell.value": {"tf": 1}, "datachef.models.source.cell.Cell.x": {"tf": 1}, "datachef.models.source.cell.Cell.y": {"tf": 1}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1}}, "df": 7}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.direction.directions.up": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.left": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.up": {"tf": 1}, "datachef.direction.directions.above": {"tf": 1}, "datachef.direction.directions.down": {"tf": 1}, "datachef.direction.directions.below": {"tf": 1}, "datachef.direction.directions.right": {"tf": 1}, "datachef.direction.directions.left": {"tf": 1}}, "df": 6}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.above": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.direction.directions.below": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.right": {"tf": 1}}, "df": 1}}}}}}}, "signature": {"root": {"0": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 3}, "3": {"9": {"docs": {"datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}}, "df": 5}, "docs": {}, "df": 0}, "docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 9.327379053088816}, "datachef.acquire.csv.http_implemented.http": {"tf": 11}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 9}, "datachef.acquire.csv.local_implemented.local": {"tf": 9.848857801796104}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 7.54983443527075}, "datachef.acquire.main.acquirer": {"tf": 11.958260743101398}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 9.327379053088816}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 5.385164807134504}, "datachef.acquire.xls.http_implemented.http": {"tf": 11.832159566199232}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 9.273618495495704}, "datachef.acquire.xls.local_implemented.local": {"tf": 10.099504938362077}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 7.874007874011811}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 11.832159566199232}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 9.746794344808963}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 10.099504938362077}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 8.774964387392123}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 6}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 4.123105625617661}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 6}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 3.4641016151377544}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 6}, "datachef.against.wrapper.regex": {"tf": 5.656854249492381}, "datachef.against.wrapper.items": {"tf": 6.164414002968976}, "datachef.column.base.BaseColumn.__init__": {"tf": 6}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 7.810249675906654}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 9.433981132056603}, "datachef.column.column.Column.horizontal_condition": {"tf": 5.477225575051661}, "datachef.column.column.Column.constant": {"tf": 4.69041575982343}, "datachef.direction.directions.Direction": {"tf": 6.855654600401044}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 3.4641016151377544}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 2.8284271247461903}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 2.8284271247461903}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 7.810249675906654}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 8}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 6}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 6}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 6}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 7.416198487095663}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 6}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 8.48528137423857}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 9}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 4.47213595499958}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 6}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 8.48528137423857}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 7.3484692283495345}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 8.48528137423857}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 8.660254037844387}, "datachef.lookup.engines.within.Within.__init__": {"tf": 10.295630140987}, "datachef.lookup.engines.within.Within.resolve": {"tf": 7.3484692283495345}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 4.47213595499958}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 6}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 4.47213595499958}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 4.47213595499958}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 4.47213595499958}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 4.47213595499958}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 8}, "datachef.models.source.cell.Cell.__init__": {"tf": 10}, "datachef.models.source.cell.Cell.is_blank": {"tf": 4.898979485566356}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 4.898979485566356}, "datachef.models.source.table.Table.__init__": {"tf": 6.48074069840786}, "datachef.models.source.table.Table.add_cell": {"tf": 5.830951894845301}, "datachef.models.source.table.LiveTable.__init__": {"tf": 9.219544457292887}, "datachef.models.source.table.LiveTable.label_as": {"tf": 4.242640687119285}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 3.4641016151377544}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 3.1622776601683795}, "datachef.models.source.table.LiveTable.from_table": {"tf": 10.14889156509222}, "datachef.notebook.ipython.in_notebook": {"tf": 3}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 7.937253933193772}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 6}, "datachef.output.tidydata.TidyData.__init__": {"tf": 8.366600265340756}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 3.1622776601683795}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 6.557438524302}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 6.782329983125268}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 7.810249675906654}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 7.615773105863909}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 7.937253933193772}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 7.937253933193772}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 9.433981132056603}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 8.246211251235321}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 8.246211251235321}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 9.433981132056603}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 8.888194417315589}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 7.615773105863909}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 9.433981132056603}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 8.48528137423857}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 6.48074069840786}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 6.48074069840786}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 6.557438524302}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 4}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 4}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 5.656854249492381}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 5.656854249492381}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 7.681145747868608}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 7.681145747868608}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 3.4641016151377544}, "datachef.selection.filters.common.is_numeric": {"tf": 5.477225575051661}, "datachef.selection.filters.common.is_not_numeric": {"tf": 5.477225575051661}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 3.1622776601683795}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 3.4641016151377544}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 4.242640687119285}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 4.242640687119285}, "datachef.selection.selectable.Selectable.expand": {"tf": 5.0990195135927845}, "datachef.selection.selectable.Selectable.fill": {"tf": 5.0990195135927845}, "datachef.selection.selectable.Selectable.shift": {"tf": 7.0710678118654755}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 4.242640687119285}, "datachef.selection.selectable.Selectable.validate": {"tf": 7.14142842854285}, "datachef.selection.selectable.Selectable.filter": {"tf": 4.242640687119285}, "datachef.selection.selectable.Selectable.re": {"tf": 4.242640687119285}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 6.782329983125268}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 6.782329983125268}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 8.94427190999916}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 4}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 4}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 3.7416573867739413}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 3.7416573867739413}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 3.1622776601683795}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 5.830951894845301}}, "df": 154, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 44}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 2.6457513110645907}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.main.acquirer": {"tf": 2.6457513110645907}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 2.6457513110645907}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 2.6457513110645907}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.4142135623730951}}, "df": 19}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.main.acquirer": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 23, "s": {"docs": {"datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 6}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 75}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1.4142135623730951}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 2.23606797749979}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 53}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters.common.ContainsString.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}}, "df": 3}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.main.acquirer": {"tf": 2}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.7320508075688772}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 87}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.fill": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 2}}, "df": 11}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 17}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 15}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 4}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 46}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}}, "df": 5}}}}}}}}, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1.7320508075688772}}, "df": 24}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {"datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 14}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 2}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 2}, "datachef.acquire.csv.local_implemented.local": {"tf": 2}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 2}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 12}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1.7320508075688772}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 2.23606797749979}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 2}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 2.23606797749979}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 2.23606797749979}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 2.23606797749979}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.resolve": {"tf": 2.23606797749979}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table.add_cell": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 2}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_numeric": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1.7320508075688772}}, "df": 52, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 29}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.cell.Cell.__init__": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.cell.Cell.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 1}}}}}, "x": {"2": {"7": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 14}, "docs": {}, "df": 0}, "docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 10, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 2}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 2}, "datachef.acquire.xls.local_implemented.local": {"tf": 2}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 2}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}, "x": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 2}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 2}}, "df": 4, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1.7320508075688772}}, "df": 24}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 8}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.__init__": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 8}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1.7320508075688772}}, "df": 11, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1.4142135623730951}}, "df": 11}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 3}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.__init__": {"tf": 2}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 14}}}}}}}, "n": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.__init__": {"tf": 2}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 21, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 6}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {"datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 24}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 32}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 12}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.__init__": {"tf": 2}, "datachef.models.source.table.LiveTable.from_table": {"tf": 2}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 2}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 2}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.models.source.table.Table.__init__": {"tf": 1}, "datachef.models.source.table.Table.add_cell": {"tf": 1}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 59}}}}}, "s": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1}}, "df": 27}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1.4142135623730951}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.wrapper.items": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 2}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 27}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 4}}}}}, "d": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 2}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 10}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 9}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1.7320508075688772}}, "df": 10}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1}, "datachef.models.source.cell.Cell.__init__": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 1}}}}}}}}}}}, "w": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 17}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 7}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}}, "df": 16, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 7}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.tidydata.TidyData": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}}, "df": 27}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}}, "df": 27}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}}, "df": 5}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.output.tidydata.TidyData": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1}}}}}}}, "doc": {"root": {"0": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 1}, "1": {"docs": {"datachef.direction.directions.Direction": {"tf": 2}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2.23606797749979}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 14}, "2": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 11}, "3": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 9}, "4": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 10}, "5": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 10}, "6": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 10}, "7": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "8": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "9": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 2}, "docs": {"datachef": {"tf": 1.4142135623730951}, "datachef.acquire": {"tf": 1.4142135623730951}, "datachef.acquire.base": {"tf": 1.7320508075688772}, "datachef.acquire.base.BaseReader": {"tf": 1.7320508075688772}, "datachef.acquire.base.BaseReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.csv": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.http": {"tf": 6.782329983125268}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 6.324555320336759}, "datachef.acquire.csv.local_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 6.164414002968976}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 5.477225575051661}, "datachef.acquire.main": {"tf": 3.4641016151377544}, "datachef.acquire.main.acquirer": {"tf": 6.244997998398398}, "datachef.acquire.python": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 6.708203932499369}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 5.477225575051661}, "datachef.acquire.xls": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.http": {"tf": 7.280109889280518}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 6.708203932499369}, "datachef.acquire.xls.local_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 6.4031242374328485}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 5.477225575051661}, "datachef.acquire.xlsx": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 7.280109889280518}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 6.4031242374328485}, "datachef.acquire.xlsx.local_implemented": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 6.4031242374328485}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 5.477225575051661}, "datachef.against": {"tf": 1.7320508075688772}, "datachef.against.implementations": {"tf": 1.7320508075688772}, "datachef.against.implementations.base": {"tf": 1.7320508075688772}, "datachef.against.implementations.base.BaseValidator": {"tf": 1.7320508075688772}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1.4142135623730951}, "datachef.against.implementations.items": {"tf": 1.7320508075688772}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1.7320508075688772}, "datachef.against.implementations.items.ItemsValidator.__init__": {"tf": 1.7320508075688772}, "datachef.against.implementations.items.ItemsValidator.items": {"tf": 1.7320508075688772}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 4.58257569495584}, "datachef.against.implementations.regex": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator.__init__": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator.pattern": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 4.69041575982343}, "datachef.against.wrapper": {"tf": 1.4142135623730951}, "datachef.against.wrapper.regex": {"tf": 4.58257569495584}, "datachef.against.wrapper.items": {"tf": 4.58257569495584}, "datachef.column": {"tf": 1.7320508075688772}, "datachef.column.base": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.__init__": {"tf": 3.7416573867739413}, "datachef.column.base.BaseColumn.engine": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.label": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 5.0990195135927845}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 4.58257569495584}, "datachef.column.column": {"tf": 1.7320508075688772}, "datachef.column.column.Column": {"tf": 4.242640687119285}, "datachef.column.column.Column.horizontal_condition": {"tf": 5.291502622129181}, "datachef.column.column.Column.constant": {"tf": 5.291502622129181}, "datachef.direction": {"tf": 1.7320508075688772}, "datachef.direction.directions": {"tf": 1.7320508075688772}, "datachef.direction.directions.BaseDirection": {"tf": 1.7320508075688772}, "datachef.direction.directions.Direction": {"tf": 5.385164807134504}, "datachef.direction.directions.up": {"tf": 1.7320508075688772}, "datachef.direction.directions.above": {"tf": 1.7320508075688772}, "datachef.direction.directions.down": {"tf": 1.7320508075688772}, "datachef.direction.directions.below": {"tf": 1.7320508075688772}, "datachef.direction.directions.right": {"tf": 1.7320508075688772}, "datachef.direction.directions.left": {"tf": 1.7320508075688772}, "datachef.exceptions": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadExcelReferenceError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadExcelReferenceError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadShiftParameterError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadShiftParameterError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 4.242640687119285}, "datachef.exceptions.badparams.WithinAxisDeclarationError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.WithinAxisDeclarationError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.OutputPassedToPreview.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.OutputPassedToPreview.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 2.23606797749979}, "datachef.exceptions.badparams.ReversedExcelRefError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.ReversedExcelRefError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.UnknownDirectionError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.UnknownDirectionError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.cells": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.NonExistentCellComparissonError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.NonExistentCellComparissonError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 2.23606797749979}, "datachef.exceptions.cells.InvlaidCellPositionError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.InvlaidCellPositionError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common": {"tf": 1.7320508075688772}, "datachef.exceptions.common.FileInputError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.FileInputError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.FileInputError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.CellsDoNotExistError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.CellsDoNotExistError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.LoneValueOnMultipleCellsError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidCellObjectError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidCellObjectError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 2.449489742783178}, "datachef.exceptions.common.UnalignedTableOperation.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.UnalignedTableOperation.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidTableSignatures.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidTableSignatures.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 2.449489742783178}, "datachef.exceptions.common.OutOfBoundsError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.OutOfBoundsError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 2.449489742783178}, "datachef.exceptions.common.ImpossibleLookupError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.ImpossibleLookupError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MissingLabelError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.MissingLabelError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MissingLabelError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.BadConditionalResolverError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.BadConditionalResolverError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.HorizontalConditionalHeaderError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.HorizontalConditionalHeaderError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.PreviewBoundarySpecificationError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.PreviewBoundarySpecificationError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MisalignedHeadersError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MisalignedHeadersError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.CellValidationError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.CellValidationError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.CellValidationError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.DroppingNonColumnError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.common.DroppingNonColumnError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.AmbiguousLookupError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.AmbiguousLookupError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.MissingDirectLookupError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.MissingDirectLookupError.msg": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.FailedLookupError.__init__": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.FailedLookupError.msg": {"tf": 1.7320508075688772}, "datachef.lookup": {"tf": 1.7320508075688772}, "datachef.lookup.base": {"tf": 1.7320508075688772}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1.7320508075688772}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.HIGHEST": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.LOWEST": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange": {"tf": 4.47213595499958}, "datachef.lookup.engines.closest.CellRange.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.low": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.high": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.cell": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.direction": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.axis_text": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 3.605551275463989}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 3.7416573867739413}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 3.7416573867739413}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.direction": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges.highest_possible_offset": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges.lowest_possible_offset": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges.table": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges.axis_text": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 3.4641016151377544}, "datachef.lookup.engines.closest.Closest": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 4.358898943540674}, "datachef.lookup.engines.closest.Closest.table": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.direction": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.ranges": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.bumped": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.start_index": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.label": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 6.082762530298219}, "datachef.lookup.engines.constant": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 4.358898943540674}, "datachef.lookup.engines.constant.Constant.cell": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.label": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 3.872983346207417}, "datachef.lookup.engines.direct": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly": {"tf": 3}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 4.358898943540674}, "datachef.lookup.engines.direct.Directly.table": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.label": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.direction": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 4.795831523312719}, "datachef.lookup.engines.horizontal_condition": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 4.795831523312719}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.label": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolver": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.priority": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.table": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 5.385164807134504}, "datachef.lookup.engines.within": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.__init__": {"tf": 12.767145334803704}, "datachef.lookup.engines.within.Within.label": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.table": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.start": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.end": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.direction_of_travel": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.direction": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.cells": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.resolve": {"tf": 4.795831523312719}, "datachef.models": {"tf": 1.7320508075688772}, "datachef.models.source": {"tf": 1.7320508075688772}, "datachef.models.source.cell": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.x": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.y": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 4.69041575982343}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 4.898979485566356}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 4.898979485566356}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 4.58257569495584}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 4.58257569495584}, "datachef.models.source.cell.VirtualCell": {"tf": 2.449489742783178}, "datachef.models.source.cell.VirtualCell.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.VirtualCell.value": {"tf": 1.7320508075688772}, "datachef.models.source.cell.VirtualCell.x": {"tf": 1.7320508075688772}, "datachef.models.source.cell.VirtualCell.y": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.value": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.x": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.y": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.cellformat": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.is_blank": {"tf": 3.605551275463989}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 3.605551275463989}, "datachef.models.source.cellformat": {"tf": 1.7320508075688772}, "datachef.models.source.cellformat.CellFormatting": {"tf": 1.7320508075688772}, "datachef.models.source.table": {"tf": 1.7320508075688772}, "datachef.models.source.table.Table": {"tf": 1.7320508075688772}, "datachef.models.source.table.Table.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.table.Table.cells": {"tf": 1.7320508075688772}, "datachef.models.source.table.Table.add_cell": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable": {"tf": 2.8284271247461903}, "datachef.models.source.table.LiveTable.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.pristine": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.filtered": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.source": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.label": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.name": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.cells": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.signature": {"tf": 1.4142135623730951}, "datachef.notebook": {"tf": 1.7320508075688772}, "datachef.notebook.ipython": {"tf": 1.7320508075688772}, "datachef.notebook.ipython.in_notebook": {"tf": 1.7320508075688772}, "datachef.notebook.preview": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary.__init__": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary.bounded": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1.7320508075688772}, "datachef.output": {"tf": 1.7320508075688772}, "datachef.output.base": {"tf": 1.7320508075688772}, "datachef.output.base.BaseOutput": {"tf": 1.7320508075688772}, "datachef.output.tidydata": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData.__init__": {"tf": 5.385164807134504}, "datachef.output.tidydata.TidyData.observations": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData.columns": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData.drop": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData.obs_apply": {"tf": 1.7320508075688772}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 2.449489742783178}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 2.23606797749979}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 2.23606797749979}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 3.1622776601683795}, "datachef.selection": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs": {"tf": 4.47213595499958}, "datachef.selection.datafuncs.common": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 5.0990195135927845}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 5.196152422706632}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 5.196152422706632}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 5.0990195135927845}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 4.69041575982343}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 5.0990195135927845}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 5.0990195135927845}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 4.69041575982343}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 6.082762530298219}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 5.0990195135927845}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 4.58257569495584}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 4.69041575982343}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 4.69041575982343}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 4.69041575982343}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.excel": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 4.358898943540674}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 4.69041575982343}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 4.795831523312719}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 4.47213595499958}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 4.58257569495584}, "datachef.selection.datafuncs.ordering": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 5.744562646538029}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 5.744562646538029}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 5.744562646538029}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 5.744562646538029}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 5.744562646538029}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 5.656854249492381}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 5.656854249492381}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 5.656854249492381}, "datachef.selection.filters": {"tf": 9.899494936611665}, "datachef.selection.filters.common": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.ContainsString": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.ContainsString.__init__": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.ContainsString.substr": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.is_numeric": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1.4142135623730951}, "datachef.selection.selectable": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 2.449489742783178}, "datachef.selection.selectable.Selectable.expand": {"tf": 3.4641016151377544}, "datachef.selection.selectable.Selectable.fill": {"tf": 2.23606797749979}, "datachef.selection.selectable.Selectable.shift": {"tf": 6.082762530298219}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.validate": {"tf": 2.449489742783178}, "datachef.selection.selectable.Selectable.filter": {"tf": 2.449489742783178}, "datachef.selection.selectable.Selectable.re": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1.7320508075688772}, "datachef.utils": {"tf": 1.7320508075688772}, "datachef.utils.cellutils": {"tf": 1.7320508075688772}, "datachef.utils.cellutils.excel": {"tf": 1.7320508075688772}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1.4142135623730951}, "datachef.utils.decorators": {"tf": 1.7320508075688772}, "datachef.utils.decorators.dontmutate": {"tf": 1.7320508075688772}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 3.7416573867739413}, "datachef.utils.fileutils": {"tf": 1.7320508075688772}, "datachef.utils.fileutils.paths": {"tf": 1.7320508075688772}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 2}}, "df": 379, "a": {"1": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "2": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "6": {"docs": {"datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 1}, "docs": {"datachef": {"tf": 1}, "datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 2.6457513110645907}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 2}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 3}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 2.23606797749979}, "datachef.acquire.main.acquirer": {"tf": 2.449489742783178}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 3.3166247903554}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.http": {"tf": 2.6457513110645907}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 3}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 2.23606797749979}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 2.6457513110645907}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 3}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 2.23606797749979}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1.7320508075688772}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1.7320508075688772}, "datachef.against.wrapper.regex": {"tf": 2}, "datachef.against.wrapper.items": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.7320508075688772}, "datachef.column.column.Column": {"tf": 1.7320508075688772}, "datachef.column.column.Column.horizontal_condition": {"tf": 2}, "datachef.column.column.Column.constant": {"tf": 1.7320508075688772}, "datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1.4142135623730951}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 2.23606797749979}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 2}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1.7320508075688772}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MissingLabelError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1.7320508075688772}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1.4142135623730951}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2.8284271247461903}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell": {"tf": 1.4142135623730951}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 2.23606797749979}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.signature": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 2}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 2}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 2}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 2}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 2}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 2}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 2}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.ordering": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 2}, "datachef.selection.filters": {"tf": 3.3166247903554}, "datachef.selection.filters.common.ContainsString": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.filter": {"tf": 2}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.4142135623730951}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1.7320508075688772}}, "df": 150, "n": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 2}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.http": {"tf": 2}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 2}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 41, "d": {"docs": {"datachef": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 2.6457513110645907}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 25, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 12}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}}, "df": 5}}}, "e": {"docs": {"datachef.acquire.main": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1}}, "df": 2, "r": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 4}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 11, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.column.column.Column": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}}, "df": 1}, "e": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 2.23606797749979}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.filters": {"tf": 3.3166247903554}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.4142135623730951}}, "df": 41, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"datachef.models.source.table.LiveTable.label_as": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 10, "s": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.filters": {"tf": 2.23606797749979}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 28}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "d": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 5}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 6}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.column.column.Column": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters.common.ContainsString": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {"datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 2}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 4}}}}}, "e": {"1": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}}, "df": 1}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 7}}}}, "t": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 8, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 4}}}, "s": {"docs": {"datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 16, "d": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 3, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 83}}, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 2}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 2}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1.7320508075688772}}, "df": 11}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.wrapper.regex": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 3, "s": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.against.wrapper": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 9}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 8}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 3, "d": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 32}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 12}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 2}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.BaseCell": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 9}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 6, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.excel": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}, "y": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 3, "d": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}}, "df": 12}, "s": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}}, "df": 1}}}, "f": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef": {"tf": 1}, "datachef.acquire": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.against.wrapper": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.column.column.Column.horizontal_condition": {"tf": 1.4142135623730951}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}}, "df": 44, "m": {"docs": {"datachef.models.source.table.Table": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {"datachef.selection.filters": {"tf": 2.23606797749979}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 52}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.4142135623730951}}, "df": 10, "s": {"docs": {"datachef.acquire.csv": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.common.CellsDoNotExistError": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"datachef.selection.filters": {"tf": 3}, "datachef.selection.filters.common": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters.common.ContainsString": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1.4142135623730951}}, "df": 3}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}}, "df": 8}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}, "w": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 8, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.excel": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"datachef.exceptions.lookups.FailedLookupError": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}, "l": {"docs": {"datachef.selection.datafuncs.common": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 8, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {"datachef": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 5}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.column.column.Column": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.filters": {"tf": 2}}, "df": 15, "s": {"docs": {"datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 17}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 17, "s": {"docs": {"datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}}, "df": 5}}}}}, "d": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 1}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 7, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef": {"tf": 1}, "datachef.acquire.main": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 5, "s": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 8, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.excel": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 2}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 22, "s": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}}, "df": 2}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 6}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 4}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 29, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 70}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 30}}}, "s": {"docs": {"datachef.column.column.Column": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 32}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.wrapper.regex": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 21, "s": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}}, "df": 2}, "d": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 6}, "r": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.lookups.FailedLookupError": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {"datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 13, "s": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.excel": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}}, "df": 1, "d": {"docs": {"datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 5}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 11, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 2}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 2}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 2}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 2.23606797749979}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}}, "df": 7, "s": {"docs": {"datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 2, "d": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}}, "df": 22}, "s": {"docs": {"datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}}, "df": 2}}}}, "w": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}}, "df": 14, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}}, "df": 4}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"datachef": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 2}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 2}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.main": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 3.3166247903554}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 2.449489742783178}, "datachef.acquire.xls.http_implemented.http": {"tf": 2}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 2}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 2}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 2}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 2}, "datachef.column.column.Column": {"tf": 2.23606797749979}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1.4142135623730951}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 2}, "datachef.exceptions.common.MissingLabelError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 2}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2.449489742783178}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable": {"tf": 2.8284271247461903}, "datachef.models.source.table.LiveTable.label": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 2}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 2}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 2}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 2}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 2}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 2}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 2}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 2}, "datachef.selection.datafuncs.ordering": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 2.6457513110645907}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 2.449489742783178}, "datachef.selection.filters": {"tf": 2.6457513110645907}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 115, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 62, "g": {"docs": {}, "df": 0, "/": {"3": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "docs": {}, "df": 0}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 12, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 10, "s": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}}, "df": 9}}, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"1": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "2": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "3": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "4": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "5": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "6": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}, "docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}}, "df": 28, "s": {"docs": {"datachef.acquire.python": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}}, "df": 7}}}}}, "s": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 18, "s": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}}}, "n": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.filters": {"tf": 2}, "datachef.selection.filters.common.ContainsString": {"tf": 1}}, "df": 18, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 4}}, "e": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 2}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 17, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}}, "df": 9}}}}}, "m": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {"datachef.exceptions.common.CellValidationError": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {"datachef": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1.4142135623730951}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 12, "s": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.filters": {"tf": 2}}, "df": 8}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"2": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}, "docs": {"datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.implementations.base.BaseValidator": {"tf": 1}}, "df": 1}, "s": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 3}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}, "y": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}}, "df": 3}, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.notebook.preview.boundary.Boundary": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2}}, "df": 2, "u": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 6}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"datachef": {"tf": 1.4142135623730951}, "datachef.acquire": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column.Column": {"tf": 1.4142135623730951}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1.4142135623730951}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 36, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 20}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}}, "df": 7}, "d": {"docs": {"datachef.against.wrapper": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 10}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}}, "df": 1, "d": {"docs": {"datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.decorators": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}}, "df": 2}, "s": {"docs": {"datachef.models.source.cell.Cell": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.fill": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.shift": {"tf": 2}}, "df": 14, "s": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 3}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 3}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}, "o": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 13}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 7}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"datachef": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1.4142135623730951}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.column.Column.horizontal_condition": {"tf": 1.7320508075688772}, "datachef.column.column.Column.constant": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1.7320508075688772}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 2.23606797749979}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1.4142135623730951}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 2.449489742783178}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 3.1622776601683795}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 2}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 2}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 2.23606797749979}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 3.4641016151377544}, "datachef.selection.selectable.Selectable": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 116, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 8}, "o": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"datachef": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"1": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2}, "2": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2}, "3": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}}, "df": 2}, "docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 6}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 2}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.column.Column": {"tf": 1.7320508075688772}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 2}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 2}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 2.6457513110645907}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 97}, "n": {"docs": {"datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}}, "df": 5}}, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 2}, "datachef.acquire.csv.local_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 2}, "datachef.acquire.main": {"tf": 2}, "datachef.acquire.main.acquirer": {"tf": 2}, "datachef.acquire.python.listoflists_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 2}, "datachef.acquire.xlsx.local_implemented": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 2}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1.4142135623730951}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1.4142135623730951}, "datachef.against.wrapper.regex": {"tf": 1.4142135623730951}, "datachef.against.wrapper.items": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 2}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.4142135623730951}, "datachef.column.column.Column": {"tf": 2.23606797749979}, "datachef.column.column.Column.horizontal_condition": {"tf": 2}, "datachef.column.column.Column.constant": {"tf": 2}, "datachef.direction.directions.Direction": {"tf": 2}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange": {"tf": 2.8284271247461903}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 2.23606797749979}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 3.605551275463989}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly": {"tf": 2}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 2.449489742783178}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 2.23606797749979}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 2}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 3.1622776601683795}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 2.449489742783178}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 4.358898943540674}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 3.3166247903554}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1.4142135623730951}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.__init__": {"tf": 2}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 2.23606797749979}, "datachef.selection.datafuncs": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 2}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 2}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.filters": {"tf": 4.47213595499958}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.validate": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.filter": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.re": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}, "datachef.utils.decorators": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.7320508075688772}}, "df": 143, "n": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}, "y": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 3}, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}, "m": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 43}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.utils.decorators": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}, "n": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 12}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.CellsDoNotExistError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 2.23606797749979}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}}, "df": 16, "s": {"docs": {"datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 1}}}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.7320508075688772}}, "df": 14, "s": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}}, "df": 1}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}}, "df": 10}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "c": {"1": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "2": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "5": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "a": {"2": {"docs": {"datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 8, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 12}, "d": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.7320508075688772}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1.7320508075688772}}, "df": 10, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}}, "df": 4}}}}}}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {"datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 3, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 11, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.utils.decorators": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 2}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 7}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.against.wrapper.items": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.filters": {"tf": 2.449489742783178}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.wrapper": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.selection.selectable.Selectable.lone_value": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.column.Column.constant": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": null}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"1": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"1": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}, "2": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}, "3": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}, "2": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"1": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}, "2": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}, "3": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}, "docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.column.Column": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 2}, "datachef.column.column.Column.constant": {"tf": 2.23606797749979}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}}, "df": 30, "s": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}}, "df": 7}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}}, "df": 4, "d": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}}, "df": 4}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common": {"tf": 1}, "datachef.utils.decorators": {"tf": 1}}, "df": 4}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 3, "s": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.7320508075688772}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.column.Column": {"tf": 1.4142135623730951}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 31, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.cell": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 4}}, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"datachef.output.tidydata.TidyData.from_tidy": {"tf": 1.4142135623730951}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 12, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.notebook.preview.boundary.Boundary": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 21, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 6}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1.7320508075688772}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1.7320508075688772}, "datachef.against.wrapper.regex": {"tf": 1.4142135623730951}, "datachef.against.wrapper.items": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 2}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1.7320508075688772}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.CellRanges": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 2.23606797749979}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 2.6457513110645907}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2.23606797749979}, "datachef.lookup.engines.within.Within.resolve": {"tf": 2.449489742783178}, "datachef.models.source.cell": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.7320508075688772}, "datachef.models.source.cell.VirtualCell": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 2}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 2}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.filters": {"tf": 2}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 85, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 2}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 2}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 3.3166247903554}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 2}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 2}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 2.449489742783178}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 2}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 2}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 2}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 2}, "datachef.selection.filters": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.ContainsString": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1.4142135623730951}}, "df": 63}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.label": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 8, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.models.source.table.LiveTable.cells": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1, "e": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1.4142135623730951}, "datachef.utils.decorators": {"tf": 1}}, "df": 11, "d": {"docs": {"datachef.acquire": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 10}, "s": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 6}, "r": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 24, "s": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 10, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}}, "df": 8, "o": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.filters": {"tf": 2}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 7, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire": {"tf": 1}, "datachef.acquire.csv": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.7320508075688772}, "datachef.acquire.python": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.7320508075688772}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.cell.Cell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 40}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 3, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.http": {"tf": 2.449489742783178}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 2.23606797749979}, "datachef.acquire.csv.local_implemented.local": {"tf": 2.23606797749979}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 2.23606797749979}, "datachef.acquire.main.acquirer": {"tf": 2}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 2.6457513110645907}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 2}, "datachef.acquire.xls.http_implemented.http": {"tf": 2.23606797749979}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 2}, "datachef.acquire.xls.local_implemented.local": {"tf": 2.23606797749979}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 2}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 2.23606797749979}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 2}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 2.23606797749979}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 2}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 17, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"1": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 1}, "docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1.7320508075688772}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable": {"tf": 1.7320508075688772}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable": {"tf": 1}, "datachef.selection.selectable.Selectable.assert_one": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 63, "s": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.cells": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.pcells": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 7}}, "s": {"docs": {"datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {"datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 2}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 2, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.models.source.table": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1.7320508075688772}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 34}}}, "l": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly": {"tf": 1.4142135623730951}}, "df": 18}}, "c": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}}, "df": 5}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 2.23606797749979}, "datachef.selection.filters.common.ContainsString": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.against.implementations.base.BaseValidator": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 10}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 2}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"1": {"7": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "b": {"2": {"4": {"docs": {"datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "2": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}, "docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}}, "df": 5, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 33, "s": {"docs": {"datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "d": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.column.column.Column": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 7}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 4}}}}}}}, "y": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 33}, "e": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.column.base.BaseColumn": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.filters": {"tf": 2}}, "df": 16, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}}, "df": 6}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 9}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 5}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}}, "df": 11}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.within.Within": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "i": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.output.tidydata.TidyData.to_dict": {"tf": 1}, "datachef.selection.filters": {"tf": 2.8284271247461903}}, "df": 7, "n": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}, "datachef.utils.decorators": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 53, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.base.BaseReader": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}}, "df": 15, "s": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 29}}}, "s": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"datachef.acquire.base.BaseReader.parse": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 16}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1.7320508075688772}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 2}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 19, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}}, "df": 2}, "d": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 2}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 5}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}}, "df": 3}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 7, "s": {"docs": {"datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 8}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 2.449489742783178}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 63, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.exceptions.common.FileInputError": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.column.column.Column": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1.4142135623730951}}, "df": 21, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.against.wrapper.items": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "s": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "f": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 7}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "y": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.table.LiveTable.signature": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.output.base.BaseOutput": {"tf": 1}, "datachef.output.tidydata.TidyData": {"tf": 1}}, "df": 7, "s": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}}, "df": 7}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.models.source.cell.BaseCell": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.csv.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.main.acquirer": {"tf": 2}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}}, "df": 8}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1.4142135623730951}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}}, "df": 1, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 2}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}}, "df": 1}}}}}}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.xls.http_implemented.http": {"tf": 1}}, "df": 1}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 5}, "p": {"docs": {"datachef.notebook.preview.boundary.Boundary": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 14}, "d": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}}, "df": 1}, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.models.source.table.LiveTable.selections_made": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 10}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}}, "df": 4}}, "r": {"docs": {"datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.acquire.csv.http_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 13, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 5}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 4}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 5, "u": {"docs": {}, "df": 0, "p": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1.7320508075688772}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1.4142135623730951}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.Closest": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}}, "df": 28, "s": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}}, "df": 1}}}, "w": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}}, "df": 3}, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main.acquirer": {"tf": 1}, "datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.table.Table": {"tf": 1}, "datachef.output.tidydata.TidyData.from_tidy_list": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cell_is_not_within": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.excel.any_excel_ref_as_wanted_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1.7320508075688772}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1.4142135623730951}}, "df": 46, "s": {"docs": {"datachef.acquire.python.listoflists_implemented": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 4}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "[": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 1}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 3}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_bottomtop": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_leftright": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 12, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_topbottom_leftright": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_bottomtop_rightleft": {"tf": 1}}, "df": 3}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.ordering.order_cells_topbottom_rightleft": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1.4142135623730951}, "datachef.column.column.Column.constant": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.label": {"tf": 1}, "datachef.models.source.table.LiveTable.label_as": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 10, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}, "datachef.exceptions.badparams.OutputPassedToPreview": {"tf": 1}, "datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.filters": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1.4142135623730951}}, "df": 24, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.wrapper.items": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.7320508075688772}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs.common.cell_is_within": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}}, "df": 7}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1.4142135623730951}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}}, "df": 7}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.selection.filters": {"tf": 2}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 3}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}}, "df": 8}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader": {"tf": 1}, "datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.BadShiftParameterError": {"tf": 1}, "datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1}, "datachef.exceptions.badparams.ReversedExcelRefError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.BadConditionalResolverError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.PreviewBoundarySpecificationError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.AmbiguousLookupError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.exceptions.lookups.FailedLookupError": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 35, "a": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.CellRanges.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 15}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.FileInputError": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.exceptions.common.UnalignedTableOperation": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.selectable.Selectable.re": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"datachef.models.source.cell.Cell.is_blank": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.against.wrapper": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"datachef.acquire.main.acquirer": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1.4142135623730951}, "datachef.exceptions.badparams.WithinAxisDeclarationError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1.7320508075688772}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 2}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1.4142135623730951}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.models.source.table.LiveTable.name": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 26, "l": {"docs": {}, "df": 0, "l": {"docs": {"datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.contains": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}}, "df": 4}}}}, "y": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.selection.datafuncs.ordering": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 1, "o": {"docs": {"datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1}, "datachef.exceptions.common.ImpossibleLookupError": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 5, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}, "datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.4142135623730951}, "datachef.exceptions.common.CellsDoNotExistError": {"tf": 1}, "datachef.exceptions.common.OutOfBoundsError": {"tf": 1}, "datachef.exceptions.common.MissingLabelError": {"tf": 1}, "datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}, "datachef.exceptions.common.DroppingNonColumnError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.datafuncs.common": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1.4142135623730951}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 30, "e": {"docs": {"datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"datachef.selection.selectable.Selectable.expand": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.exceptions.common.InvalidTableSignatures": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}}, "df": 4, "e": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1}}, "df": 2}}, "r": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"datachef.direction.directions.Direction": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.name": {"tf": 1.4142135623730951}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.fill": {"tf": 1}}, "df": 3}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.csv.http_implemented.http": {"tf": 1}, "datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.lookup.engines.closest.CellRanges.get_range_by_index": {"tf": 1.4142135623730951}}, "df": 7}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"datachef.column.base.BaseColumn.lookup_preview": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"datachef.selection.selectable.Selectable": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"datachef.column.column.Column.horizontal_condition": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1}}, "df": 2, "n": {"docs": {"datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_higher_range_than": {"tf": 1}, "datachef.lookup.engines.closest.CellRange.spans_lower_range_than": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.table.LiveTable.from_table": {"tf": 1}, "datachef.selection.datafuncs.common.cells_not_in": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.assert_excel_ref_within_cells": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_ref_to_basecell": {"tf": 1}, "datachef.selection.datafuncs.excel.multi_excel_ref_to_basecells": {"tf": 1}, "datachef.selection.datafuncs.excel.basecell_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_leftright_topbottom": {"tf": 1}, "datachef.selection.datafuncs.ordering.order_cells_rightleft_bottomtop": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.selectable.Selectable.expand": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_directly": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_closest": {"tf": 1}, "datachef.selection.selectable.Selectable.finds_observations_within": {"tf": 1}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}, "datachef.utils.fileutils.paths.ensure_existing_path": {"tf": 1}}, "df": 47}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}, "datachef.selection.datafuncs.excel.basecells_to_excel_ref": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.filters": {"tf": 1}}, "df": 1}}}, "h": {"docs": {"datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.csv.http_implemented.HttpCsvReader.parse": {"tf": 1}, "datachef.acquire.csv.local_implemented.LocalCsvReader.parse": {"tf": 1}, "datachef.acquire.main": {"tf": 1}, "datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.output.tidydata.TidyData.to_csv": {"tf": 1}}, "df": 14}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.csv.local_implemented.local": {"tf": 1}, "datachef.column.column.Column": {"tf": 1.4142135623730951}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"datachef.lookup.engines.constant.Constant.resolve": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.selection.filters": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.badparams.BadExcelReferenceError": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.7320508075688772}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.number_to_y": {"tf": 1}, "datachef.utils.cellutils.excel.y_to_number": {"tf": 1}}, "df": 20, "o": {"docs": {}, "df": 0, "u": {"docs": {"datachef.acquire.main": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.highest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.lowest_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.leftmost_point": {"tf": 1}, "datachef.notebook.preview.boundary.Boundary.rightmost_point": {"tf": 1}, "datachef.selection.datafuncs.ordering": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 9}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.common.MissingLabelError": {"tf": 1}}, "df": 1}}, "i": {"docs": {"datachef.selection.datafuncs.common.cells_on_y_index": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.acquire.main": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"datachef.against.implementations.items.ItemsValidator": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.exceptions.badparams.UnknownDirectionError": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.base.BaseValidator": {"tf": 1}}, "df": 1, "d": {"docs": {"datachef.exceptions.common.CellValidationError": {"tf": 1}}, "df": 1}, "s": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.against.implementations.base.BaseValidator.msg": {"tf": 1}, "datachef.column.column.Column": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"datachef.selection.selectable.Selectable.validate": {"tf": 1}}, "df": 1, "s": {"docs": {"datachef.against.wrapper": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"datachef.models.source.table.LiveTable.confirm_valid": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"datachef.against.implementations.items.ItemsValidator.msg": {"tf": 1}, "datachef.against.implementations.regex.RegexValidator.msg": {"tf": 1}, "datachef.against.wrapper.regex": {"tf": 1}, "datachef.against.wrapper.items": {"tf": 1}, "datachef.column.base.BaseColumn.__init__": {"tf": 1.4142135623730951}, "datachef.column.base.BaseColumn.resolve_column_cell_from_obs_cell": {"tf": 1}, "datachef.column.column.Column": {"tf": 1}, "datachef.column.column.Column.constant": {"tf": 1.4142135623730951}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.7320508075688772}, "datachef.exceptions.common.LoneValueOnMultipleCellsError": {"tf": 1}, "datachef.exceptions.common.HorizontalConditionalHeaderError": {"tf": 1}, "datachef.exceptions.common.CellValidationError": {"tf": 1}, "datachef.exceptions.lookups.MissingDirectLookupError": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.Closest.resolve": {"tf": 1}, "datachef.lookup.engines.constant.Constant": {"tf": 1}, "datachef.lookup.engines.constant.Constant.__init__": {"tf": 1.7320508075688772}, "datachef.lookup.engines.direct.Directly": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1}, "datachef.selection.filters": {"tf": 1.7320508075688772}, "datachef.selection.filters.common.ContainsString": {"tf": 1}, "datachef.selection.filters.common.is_numeric": {"tf": 1}, "datachef.selection.filters.common.is_not_numeric": {"tf": 1}, "datachef.selection.selectable.Selectable.lone_value": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.re": {"tf": 1}, "datachef.utils.decorators.dontmutate.dontmutate": {"tf": 1}}, "df": 32, "s": {"docs": {"datachef.against.wrapper.items": {"tf": 1}, "datachef.column.column.Column.horizontal_condition": {"tf": 1.4142135623730951}, "datachef.exceptions.common.InvalidCellObjectError": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.direct.Directly.__init__": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.__init__": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.output.tidydata.TidyData.__init__": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 14}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"datachef.column.base.BaseColumn": {"tf": 1}, "datachef.selection.datafuncs": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"datachef.selection.datafuncs": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.column.base.BaseColumn.__init__": {"tf": 1}, "datachef.lookup.base.BaseLookupEngine.resolve": {"tf": 1}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {"datachef.column.column.Column": {"tf": 1.4142135623730951}, "datachef.lookup.engines.closest.Closest.__init__": {"tf": 1}, "datachef.lookup.engines.direct.Directly.resolve": {"tf": 1}, "datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}, "datachef.lookup.engines.within.Within.resolve": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.models.source.table.LiveTable": {"tf": 1}, "datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 8}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.exceptions.cells.NonExistentCellComparissonError": {"tf": 1}, "datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.models.source.cell.VirtualCell": {"tf": 1}}, "df": 1}}}}}}}}}}}, "e": {"docs": {"datachef.lookup.engines.within.Within.__init__": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.direction.directions.Direction": {"tf": 1}, "datachef.models.source.cell.BaseCell.is_above": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_below": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.maximum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_y_offset": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_y_indicies": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_row_to_y_index": {"tf": 1}}, "df": 7}}}}}, "y": {"docs": {"datachef.selection.filters": {"tf": 1.4142135623730951}}, "df": 1}}}}, "x": {"docs": {"datachef.acquire.python.listoflists_implemented.list_of_lists": {"tf": 1}, "datachef.direction.directions.Direction": {"tf": 1}, "datachef.exceptions.cells.InvlaidCellPositionError": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.matches_xy": {"tf": 1.4142135623730951}, "datachef.models.source.cell.BaseCell.is_right_of": {"tf": 1.7320508075688772}, "datachef.models.source.cell.BaseCell.is_left_of": {"tf": 1.7320508075688772}, "datachef.models.source.cell.VirtualCell": {"tf": 1}, "datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}, "datachef.selection.datafuncs.common.get_outlier_indicies": {"tf": 2.23606797749979}, "datachef.selection.datafuncs.common.maximum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.minimum_x_offset": {"tf": 1}, "datachef.selection.datafuncs.common.specific_cell_from_xy": {"tf": 1}, "datachef.selection.datafuncs.common.all_used_x_indicies": {"tf": 1.4142135623730951}, "datachef.selection.datafuncs.excel": {"tf": 1}, "datachef.selection.datafuncs.excel.single_excel_column_to_x_index": {"tf": 1.4142135623730951}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.shift": {"tf": 1.4142135623730951}, "datachef.utils.cellutils.excel.letters_to_x": {"tf": 1}, "datachef.utils.cellutils.excel.x_to_letters": {"tf": 1}}, "df": 20, "l": {"docs": {}, "df": 0, "s": {"docs": {"datachef.acquire.xls": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1}, "datachef.acquire.xls.local_implemented.LocalXlsReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}}, "df": 5}}}}}}}}}}, "x": {"docs": {"datachef.acquire.xls.http_implemented": {"tf": 1}, "datachef.acquire.xls.http_implemented.HttpXlsReader": {"tf": 1}, "datachef.acquire.xls.local_implemented": {"tf": 1}, "datachef.acquire.xlsx": {"tf": 1}, "datachef.acquire.xlsx.http_implemented": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.http": {"tf": 1}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader": {"tf": 1}, "datachef.acquire.xlsx.local_implemented": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"datachef.acquire.xlsx.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.http_implemented.HttpXlsxReader.parse": {"tf": 1}, "datachef.acquire.xlsx.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xlsx.local_implemented.LocalXlsxReader.parse": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"datachef.acquire.python.listoflists_implemented.ListOfListsReader.parse": {"tf": 1}, "datachef.acquire.xls.http_implemented.http": {"tf": 1.4142135623730951}, "datachef.acquire.xls.http_implemented.HttpXlsReader.parse": {"tf": 1}, "datachef.acquire.xls.local_implemented.local": {"tf": 1.4142135623730951}, "datachef.acquire.xls.local_implemented.LocalXlsReader.parse": {"tf": 1}}, "df": 5}}}, "i": {"docs": {"datachef.selection.datafuncs.common.cells_on_x_index": {"tf": 1}}, "df": 1}, "y": {"docs": {"datachef.selection.datafuncs.common.exactly_matched_xy_cells": {"tf": 1}, "datachef.selection.datafuncs.common.exactly_matching_xy_cell": {"tf": 1}, "datachef.selection.datafuncs.common.matching_xy_cells": {"tf": 1}}, "df": 3}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"datachef.exceptions.badparams.CardinalDeclarationWithOffset": {"tf": 1}, "datachef.models.source.cell.Cell.is_blank": {"tf": 1}, "datachef.models.source.cell.Cell.is_not_blank": {"tf": 1}, "datachef.selection.filters": {"tf": 1}, "datachef.selection.selectable.Selectable.is_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.is_not_blank": {"tf": 1}, "datachef.selection.selectable.Selectable.excel_ref": {"tf": 1}, "datachef.selection.selectable.Selectable.validate": {"tf": 1}, "datachef.selection.selectable.Selectable.filter": {"tf": 1}}, "df": 9}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"datachef.notebook.ipython.in_notebook": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"datachef.exceptions.common.MisalignedHeadersError": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"datachef.lookup.engines.closest.CellRange.contains": {"tf": 1}, "datachef.lookup.engines.horizontal_condition.HorizontalCondition.resolve": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"datachef.selection.datafuncs.common.assert_quadrilaterals": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"datachef.selection.filters": {"tf": 2}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();